This is wget2.info, produced by makeinfo version 6.7 from wget2.texi.


File: wget2.info,  Node: Top,  Next: Wget2 User Manual,  Up: (dir)

Top
***

* Menu:

* Wget2 User Manual::
* Name::
* Synopsis::
* Description::
* Options::
* Environment::
* Exit Status::
* Startup File::
* Bugs::
* See also::
* Author::
* Copyright::


File: wget2.info,  Node: Wget2 User Manual,  Next: Name,  Prev: Top,  Up: Top

1 Wget2 User Manual
*******************

   • *note Name: #Name.
   • *note Synopsis: #Synopsis.
   • *note Description: #Description.
   • *note Options: #Options.
        • *note Option Syntax: #Option%20Syntax.
        • *note Basic Startup Options: #Basic%20Startup%20Options.
        • *note Logging and Input File Options:
          #Logging%20and%20Input%20File%20Options.
        • *note Download Options: #Download%20Options.
        • *note Directory Options: #Directory%20Options.
        • *note HTTP Options: #HTTP%20Options.
        • *note HTTPS (SSL/TLS) Options: #HTTPS%20Options.
        • *note Recursive Retrieval Options:
          #Recursive%20Retrieval%20Options.
        • *note Recursive Accept/Reject Options:
          #Recursive%20Accept/Reject%20Options.
        • *note Plugin Options: #Plugin%20Options.

   • *note Environment: #Environment.
   • *note Exit Status: #Exit%20Status.
   • *note Startup File: #Startup%20File.
   • *note Bugs: #Bugs.
   • *note See Also: #See%20Also.
   • *note Author: #Author.
   • *note Copyright: #Copyright.


File: wget2.info,  Node: Name,  Next: Synopsis,  Prev: Wget2 User Manual,  Up: Top

2 Name
******

Wget2 - a recursive metalink/file/website downloader.


File: wget2.info,  Node: Synopsis,  Next: Description,  Prev: Name,  Up: Top

3 Synopsis
**********

‘wget2 [options]... [URL]...’


File: wget2.info,  Node: Description,  Next: Options,  Prev: Synopsis,  Up: Top

4 Description
*************

GNU Wget2 is a free utility for non-interactive download of files from
the Web.  It supports HTTP and HTTPS protocols, as well as retrieval
through HTTP(S) proxies.

Wget2 is non-interactive, meaning that it can work in the background,
while the user is not logged on.  This allows you to start a retrieval
and disconnect from the system, letting Wget2 finish the work.  By
contrast, most of the Web browsers require constant user’s presence,
which can be a great hindrance when transferring a lot of data.

Wget2 can follow links in HTML, XHTML, CSS, RSS, Atom and sitemap files
to create local versions of remote web sites, fully recreating the
directory structure of the original site.  This is sometimes referred to
as _recursive downloading_.  While doing that, Wget2 respects the Robot
Exclusion Standard (_/robots.txt_).  Wget2 can be instructed to convert
the links in downloaded files to point at the local files, for offline
viewing.

Wget2 has been designed for robustness over slow or unstable network
connections; if a download fails due to a network problem, it will keep
retrying until the whole file has been retrieved.  If the server
supports partial downloads, it may continue the download from where it
left off.


File: wget2.info,  Node: Options,  Next: Environment,  Prev: Description,  Up: Top

5 Options
*********

* Menu:

* Option Syntax::
* Basic Startup Options::
* Logging and Input File Options::
* Download Options::
* Directory Options::
* HTTP Options::
* HTTPS SSL/TLS Options::
* Recursive Retrieval Options::
* Recursive Accept/Reject Options::
* Plugin Options::


File: wget2.info,  Node: Option Syntax,  Next: Basic Startup Options,  Up: Options

5.1 Option Syntax
=================

Every option has a long form and sometimes also a short one.  Long
options are more convenient to remember, but take time to type.  You may
freely mix different option styles.  Thus you may write:

  wget2 -r --tries=10 https://example.com/ -o log

The space between the option accepting an argument and the argument may
be omitted.  Instead of ‘-o log’ you can write ‘-olog’.

You may put several options that do not require arguments together,
like:

  wget2 -drc <URL>

This is equivalent to:

  wget2 -d -r -c <URL>

Since the options can be specified after the arguments, you may
terminate them with ‘--’.  So the following will try to download URL
‘-x’, reporting failure to ‘log’:

  wget2 -o log -- -x

The options that accept comma-separated lists all respect the convention
that prepending ‘--no-’ clears its value.  This can be useful to clear
the ‘.wgetrc’ settings.  For instance, if your ‘.wgetrc’ sets
‘exclude-directories’ to ‘/cgi-bin’, the following example will first
reset it, and then set it to exclude ‘/priv’ and ‘/trash’.  You can also
clear the lists in ‘.wgetrc’.

  wget2 --no-exclude-directories -X /priv,/trash

Most options that do not accept arguments are boolean options, so named
because their state can be captured with a yes-or-no (“boolean”)
variable.  A boolean option is either affirmative or negative (beginning
with ‘--no-’).  All such options share several properties.

Affirmative options can be negated by prepending the ‘--no-’ to the
option name; negative options can be negated by omitting the ‘--no-’
prefix.  This might seem superfluous - if the default for an affirmative
option is to not do something, then why provide a way to explicitly turn
it off?  But the startup file may in fact change the default.  For
instance, using ‘timestamping = on’ in ‘.wgetrc’ makes Wget2 download
updated files only.  Using ‘--no-timestamping’ is the only way to
restore the factory default from the command line.


File: wget2.info,  Node: Basic Startup Options,  Next: Logging and Input File Options,  Prev: Option Syntax,  Up: Options

5.2 Basic Startup Options
=========================

* Menu:

* -V --version::
* -h --help::
* -b --background::
* -e --execute=command::
* --hyperlink::


File: wget2.info,  Node: -V --version,  Next: -h --help,  Up: Basic Startup Options

5.2.1 ‘-V’, ‘--version’
-----------------------

Display the version of Wget2.


File: wget2.info,  Node: -h --help,  Next: -b --background,  Prev: -V --version,  Up: Basic Startup Options

5.2.2 ‘-h’, ‘--help’
--------------------

Print a help message describing all of Wget2’s command-line options.


File: wget2.info,  Node: -b --background,  Next: -e --execute=command,  Prev: -h --help,  Up: Basic Startup Options

5.2.3 ‘-b’, ‘--background’
--------------------------

Go to background immediately after startup.  If no output file is
specified via the ‘-o’, output is redirected to ‘wget-log’.


File: wget2.info,  Node: -e --execute=command,  Next: --hyperlink,  Prev: -b --background,  Up: Basic Startup Options

5.2.4 ‘-e’, ‘--execute=command’
-------------------------------

Execute command as if it were a part of ‘.wgetrc’.  A command thus
invoked will be executed after the commands in ‘.wgetrc’, thus taking
precedence over them.  If you need to specify more than one wgetrc
command, use multiple instances of ‘-e’.


File: wget2.info,  Node: --hyperlink,  Prev: -e --execute=command,  Up: Basic Startup Options

5.2.5 ‘--hyperlink’
-------------------

Hyperlink names of downloaded files so that they can opened from the
terminal by clicking on them.  Only a few terminal emulators currently
support hyperlinks.  Enable this option if you know your terminal
supports hyperlinks.


File: wget2.info,  Node: Logging and Input File Options,  Next: Download Options,  Prev: Basic Startup Options,  Up: Options

5.3 Logging and Input File Options
==================================

* Menu:

* -o --output-file=logfile::
* -a --append-output=logfile::
* -d --debug::
* -q --quiet::
* -v --verbose::
* -nv --no-verbose::
* --report-speed=type::
* -i --input-file=file::
* -F --force-html::
* --force-css::
* --force-sitemap::
* --force-atom::
* --force-rss::
* --force-metalink::
* -B --base=URL::
* --config=FILE::
* --rejected-log=logfile [Not implemented yet]::
* --local-db::
* --stats-dns=[FORMAT]FILE::
* --stats-tls=[FORMAT]FILE::
* --stats-ocsp=[FORMAT]FILE::
* --stats-server=[FORMAT]FILE::
* --stats-site=[FORMAT]FILE::


File: wget2.info,  Node: -o --output-file=logfile,  Next: -a --append-output=logfile,  Up: Logging and Input File Options

5.3.1 ‘-o’, ‘--output-file=logfile’
-----------------------------------

Log all messages to ‘logfile’.  The messages are normally reported to
standard error.


File: wget2.info,  Node: -a --append-output=logfile,  Next: -d --debug,  Prev: -o --output-file=logfile,  Up: Logging and Input File Options

5.3.2 ‘-a’, ‘--append-output=logfile’
-------------------------------------

Append to ‘logfile’.  This is the same as ‘-o’, only it appends to
‘logfile’ instead of overwriting the old log file.  If ‘logfile’ does
not exist, a new file is created.


File: wget2.info,  Node: -d --debug,  Next: -q --quiet,  Prev: -a --append-output=logfile,  Up: Logging and Input File Options

5.3.3 ‘-d’, ‘--debug’
---------------------

Turn on debug output, meaning various information important to the
developers of Wget2 if it does not work properly.  Your system
administrator may have chosen to compile Wget2 without debug support, in
which case ‘-d’ will not work.  Please note that compiling with debug
support is always safe, Wget2 compiled with the debug support will not
print any debug info unless requested with ‘-d’.


File: wget2.info,  Node: -q --quiet,  Next: -v --verbose,  Prev: -d --debug,  Up: Logging and Input File Options

5.3.4 ‘-q’, ‘--quiet’
---------------------

Turn off Wget2’s output.


File: wget2.info,  Node: -v --verbose,  Next: -nv --no-verbose,  Prev: -q --quiet,  Up: Logging and Input File Options

5.3.5 ‘-v’, ‘--verbose’
-----------------------

Turn on verbose output, with all the available data.  The default output
is verbose.


File: wget2.info,  Node: -nv --no-verbose,  Next: --report-speed=type,  Prev: -v --verbose,  Up: Logging and Input File Options

5.3.6 ‘-nv’, ‘--no-verbose’
---------------------------

Turn off verbose without being completely quiet (use ‘-q’ for that),
which means that error messages and basic information still get printed.


File: wget2.info,  Node: --report-speed=type,  Next: -i --input-file=file,  Prev: -nv --no-verbose,  Up: Logging and Input File Options

5.3.7 ‘--report-speed=type’
---------------------------

Output bandwidth as ‘type’.  The only accepted values are ‘bytes’ (which
is set by default) and ‘bits’.  This option only works if
‘--progress=bar’ is also set.


File: wget2.info,  Node: -i --input-file=file,  Next: -F --force-html,  Prev: --report-speed=type,  Up: Logging and Input File Options

5.3.8 ‘-i’, ‘--input-file=file’
-------------------------------

Read URLs from a local or external file.  If ‘-’ is specified as file,
URLs are read from the standard input.  Use ‘./-’ to read from a file
literally named ‘-’.

If this function is used, no URLs need be present on the command line.
If there are URLs both on the command line and in an input file, those
on the command lines will be the first ones to be retrieved.  ‘file’ is
expected to contain one URL per line, except one of the –force- options
specifies a different format.

If you specify ‘--force-html’, the document will be regarded as HTML. In
that case you may have problems with relative links, which you can solve
either by adding ‘<base href="url">’ to the documents or by specifying
‘--base=url’ on the command line.

If you specify ‘--force-css’, the document will be regarded as CSS.

If you specify ‘--force-sitemap’, the document will be regarded as XML
sitemap.

If you specify ‘--force-atom’, the document will be regarded as Atom
Feed.

If you specify ‘--force-rss’, the document will be regarded as RSS Feed.

If you specify ‘--force-metalink’, the document will be regarded as
Metalink description.

If you have problems with relative links, you should use ‘--base=url’ on
the command line.


File: wget2.info,  Node: -F --force-html,  Next: --force-css,  Prev: -i --input-file=file,  Up: Logging and Input File Options

5.3.9 ‘-F’, ‘--force-html’
--------------------------

When input is read from a file, force it to be treated as an HTML file.
This enables you to retrieve relative links from existing HTML files on
your local disk, by adding “” to HTML, or using the –base command-line
option.


File: wget2.info,  Node: --force-css,  Next: --force-sitemap,  Prev: -F --force-html,  Up: Logging and Input File Options

5.3.10 ‘--force-css’
--------------------

Read and parse the input file as CSS. This enables you to retrieve links
from existing CSS files on your local disk.  You will need –base to
handle relative links correctly.


File: wget2.info,  Node: --force-sitemap,  Next: --force-atom,  Prev: --force-css,  Up: Logging and Input File Options

5.3.11 ‘--force-sitemap’
------------------------

Read and parse the input file as sitemap XML. This enables you to
retrieve links from existing sitemap files on your local disk.  You will
need –base to handle relative links correctly.


File: wget2.info,  Node: --force-atom,  Next: --force-rss,  Prev: --force-sitemap,  Up: Logging and Input File Options

5.3.12 ‘--force-atom’
---------------------

Read and parse the input file as Atom Feed XML. This enables you to
retrieve links from existing sitemap files on your local disk.  You will
need –base to handle relative links correctly.


File: wget2.info,  Node: --force-rss,  Next: --force-metalink,  Prev: --force-atom,  Up: Logging and Input File Options

5.3.13 ‘--force-rss’
--------------------

Read and parse the input file as RSS Feed XML. This enables you to
retrieve links from existing sitemap files on your local disk.  You will
need –base to handle relative links correctly.


File: wget2.info,  Node: --force-metalink,  Next: -B --base=URL,  Prev: --force-rss,  Up: Logging and Input File Options

5.3.14 ‘--force-metalink’
-------------------------

Read and parse the input file as Metalink.  This enables you to retrieve
links from existing Metalink files on your local disk.  You will need
–base to handle relative links correctly.


File: wget2.info,  Node: -B --base=URL,  Next: --config=FILE,  Prev: --force-metalink,  Up: Logging and Input File Options

5.3.15 ‘-B’, ‘--base=URL’
-------------------------

Resolves relative links using URL as the point of reference, when
reading links from an HTML file specified via the -i/–input-file option
(together with a –force... option, or when the input file was fetched
remotely from a server describing it as HTML, CSS, Atom or RSS). This is
equivalent to the presence of a “BASE” tag in the HTML input file, with
URL as the value for the “href” attribute.

For instance, if you specify ‘https://example.com/bar/a.html’ for URL,
and Wget2 reads ‘../baz/b.html’ from the input file, it would be
resolved to ‘https://example.com/baz/b.html’.


File: wget2.info,  Node: --config=FILE,  Next: --rejected-log=logfile [Not implemented yet],  Prev: -B --base=URL,  Up: Logging and Input File Options

5.3.16 ‘--config=FILE’
----------------------

Specify the location of configuration files you wish to use.  If you
specify more than one file, either by using a comma-separated list or
several ‘--config’ options, these files are read in left-to-right order.
The files given in ‘$SYSTEM_WGET2RC’ and (‘$WGET2RC’ or ‘~/.wget2rc’)
are read in that order and then the user-provided config file(s).  If
set, ‘$WGET2RC’ replaces ‘~/.wget2rc’.

‘--no-config’ empties the internal list of config files.  So if you want
to prevent reading any config files, give –no-config on the command
line.

‘--no-config’ followed by ‘--config=file’ just reads ‘file’ and skips
reading the default config files.

Wget will attempt to tilde-expand filenames written in the configuration
file on supported platforms.  To use a file that starts with the
character literal ‘~’, use “./~” or an absolute path.


File: wget2.info,  Node: --rejected-log=logfile [Not implemented yet],  Next: --local-db,  Prev: --config=FILE,  Up: Logging and Input File Options

5.3.17 ‘--rejected-log=logfile’ [Not implemented yet]
-----------------------------------------------------

Logs all URL rejections to logfile as comma separated values.  The
values include the reason of rejection, the URL and the parent URL it
was found in.


File: wget2.info,  Node: --local-db,  Next: --stats-dns=[FORMAT]FILE,  Prev: --rejected-log=logfile [Not implemented yet],  Up: Logging and Input File Options

5.3.18 ‘--local-db’
-------------------

Enables reading/writing to local database files (default: on).

These are the files for ‘--hsts’, ‘--hpkp’, ‘--ocsp’, etc.

With ‘--no-local-db’ you can switch reading/writing off, e.g. useful for
testing.

This option does not influence the reading of config files.


File: wget2.info,  Node: --stats-dns=[FORMAT]FILE,  Next: --stats-tls=[FORMAT]FILE,  Prev: --local-db,  Up: Logging and Input File Options

5.3.19 ‘--stats-dns=[FORMAT:]FILE’
----------------------------------

Save DNS stats in format ‘FORMAT’, in file ‘FILE’.

‘FORMAT’ can be ‘human’ or ‘csv’.  ‘-’ is shorthand for ‘stdout’ and ‘h’
is shorthand for ‘human’.

The CSV output format is

Hostname,IP,Port,Duration

`Duration` is given in milliseconds.


File: wget2.info,  Node: --stats-tls=[FORMAT]FILE,  Next: --stats-ocsp=[FORMAT]FILE,  Prev: --stats-dns=[FORMAT]FILE,  Up: Logging and Input File Options

5.3.20 ‘--stats-tls=[FORMAT:]FILE’
----------------------------------

Save TLS stats in format ‘FORMAT’, in file ‘FILE’.

‘FORMAT’ can be ‘human’ or ‘csv’.  ‘-’ is shorthand for ‘stdout’ and ‘h’
is shorthand for ‘human’.

The CSV output format is

Hostname,TLSVersion,FalseStart,TFO,Resumed,ALPN,HTTPVersion,Certificates,Duration

`TLSVersion` can be 1,2,3,4,5 for SSL3, TLS1.0, TLS1.1, TLS1.2 and TLS1.3. -1 means 'None'.

`FalseStart` whether the connection used TLS False Start. -1 if not applicable.

`TFO` whether the connection used TCP Fast Open. -1 is TFO was disabled.

`Resumed` whether the TLS session was resumed or not.

`ALPN` is the ALPN negotiation string.

`HTTPVersion` is 0 for HTTP 1.1 and 1 is for HTTP 2.0.

`Certificates` is the size of the server's certificate chain.

`Duration` is given in milliseconds.


File: wget2.info,  Node: --stats-ocsp=[FORMAT]FILE,  Next: --stats-server=[FORMAT]FILE,  Prev: --stats-tls=[FORMAT]FILE,  Up: Logging and Input File Options

5.3.21 ‘--stats-ocsp=[FORMAT:]FILE’
-----------------------------------

Save OCSP stats in format ‘FORMAT’, in file ‘FILE’.

‘FORMAT’ can be ‘human’ or ‘csv’.  ‘-’ is shorthand for ‘stdout’ and ‘h’
is shorthand for ‘human’.

The CSV output format is

Hostname,Stapling,Valid,Revoked,Ignored

`Stapling` whether an OCSP response was stapled or not.

`Valid` how many server certificates were valid regarding OCSP.

`Revoked` how many server certificates were revoked regarding OCSP.

`Ignored` how many server certificates had been ignored or OCSP responses missing.


File: wget2.info,  Node: --stats-server=[FORMAT]FILE,  Next: --stats-site=[FORMAT]FILE,  Prev: --stats-ocsp=[FORMAT]FILE,  Up: Logging and Input File Options

5.3.22 ‘--stats-server=[FORMAT:]FILE’
-------------------------------------

Save Server stats in format ‘FORMAT’, in file ‘FILE’.

‘FORMAT’ can be ‘human’ or ‘csv’.  ‘-’ is shorthand for ‘stdout’ and ‘h’
is shorthand for ‘human’.

The CSV output format is

Hostname,IP,Scheme,HPKP,NewHPKP,HSTS,CSP

`Scheme` 0,1,2 mean `None`, `http`, `https`.

 `HPKP` values 0,1,2,3 mean 'No HPKP', 'HPKP matched', 'HPKP doesn't match', 'HPKP error'.

`NewHPKP` whether server sent HPKP (Public-Key-Pins) header.

`HSTS` whether server sent HSTS (Strict-Transport-Security) header.

`CSP` whether server sent CSP (Content-Security-Policy) header.


File: wget2.info,  Node: --stats-site=[FORMAT]FILE,  Prev: --stats-server=[FORMAT]FILE,  Up: Logging and Input File Options

5.3.23 ‘--stats-site=[FORMAT:]FILE’
-----------------------------------

Save Site stats in format ‘FORMAT’, in file ‘FILE’.

‘FORMAT’ can be ‘human’ or ‘csv’.  ‘-’ is shorthand for ‘stdout’ and ‘h’
is shorthand for ‘human’.

The CSV output format is

ID,ParentID,URL,Status,Link,Method,Size,SizeDecompressed,TransferTime,ResponseTime,Encoding,Verification

`ID` unique ID for a stats record.

`ParentID` ID of the parent document, relevant for `--recursive` mode.

`URL` URL of the document.

`Status` HTTP response code or 0 if not applicable.

`Link` 1 means 'direkt link', 0 means 'redirection link'.

`Method` 1,2,3 mean GET, HEAD, POST request type.

`Size` size of downloaded body (theoretical value for HEAD requests).

`SizeDecompressed` size of decompressed body (0 for HEAD requests).

`TransferTime` ms between start of request and completed download.

`ResponseTime` ms between start of request and first response packet.

`Encoding` 0,1,2,3,4,5 mean server side compression was 'identity', 'gzip', 'deflate', 'lzma/xz', 'bzip2', 'brotli', 'zstd', 'lzip'

`Verification` PGP verification status. 0,1,2,3 mean 'none',  'valid', 'invalid', 'bad', 'missing'.


File: wget2.info,  Node: Download Options,  Next: Directory Options,  Prev: Logging and Input File Options,  Up: Options

5.4 Download Options
====================

* Menu:

* --bind-address=ADDRESS::
* --bind-interface=INTERFACE::
* -t --tries=number::
* --retry-on-http-error=list::
* -O --output-document=file::
* -nc --no-clobber::
* --backups=backups::
* -c --continue::
* --start-pos=OFFSET::
* --progress=type::
* --force-progress::
* -N --timestamping::
* --no-if-modified-since::
* --no-use-server-timestamps::
* -S --server-response::
* --spider::
* -T seconds --timeout=seconds::
* --dns-timeout=seconds::
* --connect-timeout=seconds::
* --read-timeout=seconds::
* --limit-rate=amount::
* -w seconds --wait=seconds::
* --waitretry=seconds::
* --random-wait::
* --no-proxy[=exceptions]::
* -Q quota --quota=quota::
* --restrict-file-names=modes::
* -4 --inet4-only -6 --inet6-only::
* --prefer-family=none/IPv4/IPv6::
* --tcp-fastopen::
* --dns-cache-preload=file::
* --dns-cache::
* --retry-connrefused::
* --user=user --password=password::
* --ask-password::
* --use-askpass=command::
* --no-iri::
* --local-encoding=encoding::
* --remote-encoding=encoding::
* --input-encoding=encoding::
* --unlink::
* --cut-url-get-vars::
* --cut-file-get-vars::
* --chunk-size=size::
* --max-threads=number::
* -s --verify-sig[=fail|no-fail]::
* --signature-extensions::
* --gnupg-homedir::
* --verify-save-failed::
* --xattr::
* --metalink::
* --fsync-policy::
* --http2-request-window=number::
* --keep-extension::


File: wget2.info,  Node: --bind-address=ADDRESS,  Next: --bind-interface=INTERFACE,  Up: Download Options

5.4.1 ‘--bind-address=ADDRESS’
------------------------------

When making client TCP/IP connections, bind to ADDRESS on the local
machine.  ADDRESS may be specified as a hostname or IP address.  This
option can be useful if your machine is bound to multiple IPs.


File: wget2.info,  Node: --bind-interface=INTERFACE,  Next: -t --tries=number,  Prev: --bind-address=ADDRESS,  Up: Download Options

5.4.2 ‘--bind-interface=INTERFACE’
----------------------------------

When making client TCP/IP connections, bind to INTERFACE on the local
machine.  INTERFACE may be specified as the name for a Network
Interface.  This option can be useful if your machine has multiple
Network Interfaces.  However, the option works only when wget2 is run
with elevated privileges (On GNU/Linux: root / sudo or ‘sudo setcap
cap_net_raw+ep <path to wget|wget2>’).


File: wget2.info,  Node: -t --tries=number,  Next: --retry-on-http-error=list,  Prev: --bind-interface=INTERFACE,  Up: Download Options

5.4.3 ‘-t’, ‘--tries=number’
----------------------------

Set number of tries to number.  Specify 0 or inf for infinite retrying.
The default is to retry 20 times, with the exception of fatal errors
like “connection refused” or “not found” (404), which are not retried.


File: wget2.info,  Node: --retry-on-http-error=list,  Next: -O --output-document=file,  Prev: -t --tries=number,  Up: Download Options

5.4.4 ‘--retry-on-http-error=list’
----------------------------------

Specify a comma-separated list of HTTP codes in which Wget2 will retry
the download.  The elements of the list may contain wildcards.  If an
HTTP code starts with the character ‘!’ it won’t be downloaded.  This is
useful when trying to download something with exceptions.  For example,
retry every failed download if error code is not 404:

  wget2 --retry-on-http-error=*,\!404 https://example.com/

Please keep in mind that “200” is the only forbidden code.  If it is
included on the status list Wget2 will ignore it.  The max.  number of
download attempts is given by the ‘--tries’ option.


File: wget2.info,  Node: -O --output-document=file,  Next: -nc --no-clobber,  Prev: --retry-on-http-error=list,  Up: Download Options

5.4.5 ‘-O’, ‘--output-document=file’
------------------------------------

The documents will not be written to the appropriate files, but all will
be concatenated together and written to file.  If ‘-’ is used as file,
documents will be printed to standard output, disabling link conversion.
Use ‘./-’ to print to a file literally named ‘-’.  To not get Wget2
status messages mixed with file content, use ‘-q’ in combination with
‘-O-’ (This is different to how Wget 1.x behaves).

Using -r or -p with -O may not work as you expect: Wget2 won’t just
download the first file to file and then download the rest to their
normal names: all downloaded content will be placed in file.

A combination with -nc is only accepted if the given output file does
not exist.

When used along with the -c option, Wget2 will attempt to continue
downloading the file whose name is passed to the option, irrespective of
whether the actual file already exists on disk or not.  This allows
users to download a file with a temporary name alongside the actual
file.

Note that a combination with -k is only permitted when downloading a
single document, as in that case it will just convert all relative URIs
to external ones; -k makes no sense for multiple URIs when they’re all
being downloaded to a single file; -k can be used only when the output
is a regular file.

Compatibility-Note: Wget 1.x used to treat -O as analogous to shell
redirection.  Wget2 does not handle the option similarly.  Hence, the
file will not always be newly created.  The file’s timestamps will not
be affected unless it is actually written to.  As a result, both -c and
-N options are now supported in conjunction with this option.


File: wget2.info,  Node: -nc --no-clobber,  Next: --backups=backups,  Prev: -O --output-document=file,  Up: Download Options

5.4.6 ‘-nc’, ‘--no-clobber’
---------------------------

If a file is downloaded more than once in the same directory, Wget2’s
behavior depends on a few options, including ‘-nc’.  In certain cases,
the local file will be clobbered, or overwritten, upon repeated
download.  In other cases it will be preserved.

When running Wget2 without ‘-N’, ‘-nc’, ‘-r’, or ‘-p’, downloading the
same file in the same directory will result in the original copy of file
being preserved and the second copy being named file.1.  If that file is
downloaded yet again, the third copy will be named file.2, and so on.
(This is also the behavior with ‘-nd’, even if ‘-r’ or ‘-p’ are in
effect.)  Use ‘--keep-extension’ to use an alternative file naming
pattern.

When ‘-nc’ is specified, this behavior is suppressed, and Wget2 will
refuse to download newer copies of file.  Therefore, "“no-clobber”" is
actually a misnomer in this mode - it’s not clobbering that’s prevented
(as the numeric suffixes were already preventing clobbering), but rather
the multiple version saving that’s prevented.

When running Wget2 with ‘-r’ or ‘-p’, but without ‘-N’, ‘-nd’, or ‘-nc’,
re-downloading a file will result in the new copy simply overwriting the
old.  Adding -nc will prevent this behavior, instead causing the
original version to be preserved and any newer copies on the server to
be ignored.

When running Wget2 with ‘-N’, with or without ‘-r’ or ‘-p’, the decision
as to whether or not to download a newer copy of a file depends on the
local and remote timestamp and size of the file.  -nc may not be
specified at the same time as -N.

A combination with ‘-O’/‘--output-document’ is only accepted if the
given output file does not exist.

Note that when -nc is specified, files with the suffixes .html or .htm
will be loaded from the local disk and parsed as if they had been
retrieved from the Web.


File: wget2.info,  Node: --backups=backups,  Next: -c --continue,  Prev: -nc --no-clobber,  Up: Download Options

5.4.7 ‘--backups=backups’
-------------------------

Before (over)writing a file, back up an existing file by adding a .1
suffix to the file name.  Such backup files are rotated to .2, .3, and
so on, up to ‘backups’ (and lost beyond that).


File: wget2.info,  Node: -c --continue,  Next: --start-pos=OFFSET,  Prev: --backups=backups,  Up: Download Options

5.4.8 ‘-c’, ‘--continue’
------------------------

Continue getting a partially-downloaded file.  This is useful when you
want to finish up a download started by a previous instance of Wget2, or
by another program.  For instance:

  wget2 -c https://example.com/tarball.gz

If there is a file named ‘tarball.gz’ in the current directory, Wget2
will assume that it is the first portion of the remote file, and will
ask the server to continue the retrieval from an offset equal to the
length of the local file.

Note that you don’t need to specify this option if you just want the
current invocation of Wget2 to retry downloading a file should the
connection be lost midway through.  This is the default behavior.  -c
only affects resumption of downloads started prior to this invocation of
Wget2, and whose local files are still sitting around.

Without -c, the previous example would just download the remote file to
‘tarball.gz.1’, leaving the truncated ‘tarball.gz’ file alone.

If you use -c on a non-empty file, and it turns out that the server does
not support continued downloading, Wget2 will refuse to start the
download from scratch, which would effectively ruin existing contents.
If you really want the download to start from scratch, remove the file.

If you use -c on a file which is of equal size as the one on the server,
Wget2 will refuse to download the file and print an explanatory message.
The same happens when the file is smaller on the server than locally
(presumably because it was changed on the server since your last
download attempt).  Because “continuing” is not meaningful, no download
occurs.

On the other side of the coin, while using -c, any file that’s bigger on
the server than locally will be considered an incomplete download and
only “(length(remote) - length(local))” bytes will be downloaded and
tacked onto the end of the local file.  This behavior can be desirable
in certain cases.  For instance, you can use ‘wget2 -c’ to download just
the new portion that’s been appended to a data collection or log file.

However, if the file is bigger on the server because it’s been changed,
as opposed to just appended to, you’ll end up with a garbled file.
Wget2 has no way of verifying that the local file is really a valid
prefix of the remote file.  You need to be especially careful of this
when using -c in conjunction with -r, since every file will be
considered as an “incomplete download” candidate.

Another instance where you’ll get a garbled file if you try to use -c is
if you have a lame HTTP proxy that inserts a “transfer interrupted”
string into the local file.  In the future a “rollback” option may be
added to deal with this case.

Note that ‘-c’ only works with HTTP servers that support the “Range”
header.


File: wget2.info,  Node: --start-pos=OFFSET,  Next: --progress=type,  Prev: -c --continue,  Up: Download Options

5.4.9 ‘--start-pos=OFFSET’
--------------------------

Start downloading at zero-based position ‘OFFSET’.  Offset may be
expressed in bytes, kilobytes with the ‘k' suffix, or megabytes with
the’m’ suffix, etc.

‘--start-pos’ has higher precedence over ‘--continue’.  When
‘--start-pos’ and ‘--continue’ are both specified, Wget2 will emit a
warning then proceed as if ‘--continue’ was absent.

Server support for continued download is required, otherwise –start-pos
cannot help.  See -c for details.


File: wget2.info,  Node: --progress=type,  Next: --force-progress,  Prev: --start-pos=OFFSET,  Up: Download Options

5.4.10 ‘--progress=type’
------------------------

Select the type of the progress indicator you wish to use.  Legal
indicators are “dot” and “bar”.

It draws an ASCII progress bar graphics (a.k.a “thermometer” display)
indicating the status of retrieval.  If the output is not a TTY, the
“dot” bar will be used by default.

Use ‘--progress=dot’ to switch to the “dot” display.  It traces the
retrieval by printing dots on the screen, each dot representing a fixed
amount of downloaded data.

The progress type can also take one or more parameters.  The parameters
vary based on the type selected.  Parameters to type are passed by
appending them to the type separated by a colon (‘:’) like this:
‘--progress=type:parameter1:parameter2’.

When using the dotted retrieval, you may set the style by specifying the
type as dot:style.  Different styles assign different meaning to one
dot.  With the “default” style each dot represents 1K, there are ten
dots in a cluster and 50 dots in a line.  The “binary” style has a more
“computer”-like orientation: 8K dots, 16-dots clusters and 48 dots per
line (which makes for 384K lines).  The “mega” style is suitable for
downloading large files, each dot represents 64K retrieved, there are
eight dots in a cluster, and 48 dots on each line (so each line contains
3M). If “mega” is not enough then you can use the “giga” style.  Each
dot represents 1M retrieved, there are eight dots in a cluster, and 32
dots on each line (so each line contains 32M).

With ‘--progress=bar’, there are currently two possible parameters,
‘force’ and ‘noscroll’.

When the output is not a TTY, the progress bar always falls back to
“dot”, even if ‘--progress=bar’ was passed to Wget2 during invocation.
This behaviour can be overridden and the “bar” output forced by using
the “force” parameter as ‘--progress=bar:force’.

By default, the bar style progress bar scroll the name of the file from
left to right for the file being downloaded if the filename exceeds the
maximum length allotted for its display.  In certain cases, such as with
–progress=bar:force, one may not want the scrolling filename in the
progress bar.  By passing the “noscroll” parameter, Wget2 can be forced
to display as much of the filename as possible without scrolling through
it.

Note that you can set the default style using the “progress” command in
.wgetrc.  That setting may be overridden from the command line.  For
example, to force the bar output without scrolling, use
–progress=bar:force:noscroll.


File: wget2.info,  Node: --force-progress,  Next: -N --timestamping,  Prev: --progress=type,  Up: Download Options

5.4.11 ‘--force-progress’
-------------------------

Force Wget2 to display the progress bar in any verbosity.

By default, Wget2 only displays the progress bar in verbose mode.  One
may however, want Wget2 to display the progress bar on screen in
conjunction with any other verbosity modes like –no-verbose or –quiet.
This is often a desired a property when invoking Wget2 to download
several small/large files.  In such a case, Wget2 could simply be
invoked with this parameter to get a much cleaner output on the screen.

This option will also force the progress bar to be printed to stderr
when used alongside the ‘--output-file’ option.


File: wget2.info,  Node: -N --timestamping,  Next: --no-if-modified-since,  Prev: --force-progress,  Up: Download Options

5.4.12 ‘-N’, ‘--timestamping’
-----------------------------

Turn on time-stamping.


File: wget2.info,  Node: --no-if-modified-since,  Next: --no-use-server-timestamps,  Prev: -N --timestamping,  Up: Download Options

5.4.13 ‘--no-if-modified-since’
-------------------------------

Do not send If-Modified-Since header in -N mode.  Send preliminary HEAD
request instead.  This has only effect in -N mode.


File: wget2.info,  Node: --no-use-server-timestamps,  Next: -S --server-response,  Prev: --no-if-modified-since,  Up: Download Options

5.4.14 ‘--no-use-server-timestamps’
-----------------------------------

Don’t set the local file’s timestamp by the one on the server.

By default, when a file is downloaded, its timestamps are set to match
those from the remote file.  This allows the use of –timestamping on
subsequent invocations of Wget2.  However, it is sometimes useful to
base the local file’s timestamp on when it was actually downloaded; for
that purpose, the –no-use-server-timestamps option has been provided.


File: wget2.info,  Node: -S --server-response,  Next: --spider,  Prev: --no-use-server-timestamps,  Up: Download Options

5.4.15 ‘-S’, ‘--server-response’
--------------------------------

Print the response headers sent by HTTP servers.


File: wget2.info,  Node: --spider,  Next: -T seconds --timeout=seconds,  Prev: -S --server-response,  Up: Download Options

5.4.16 ‘--spider’
-----------------

When invoked with this option, Wget2 will behave as a Web spider, which
means that it will not download the pages, just check that they are
there.  For example, you can use Wget2 to check your bookmarks:

  wget2 --spider --force-html -i bookmarks.html

This feature needs much more work for Wget2 to get close to the
functionality of real web spiders.


File: wget2.info,  Node: -T seconds --timeout=seconds,  Next: --dns-timeout=seconds,  Prev: --spider,  Up: Download Options

5.4.17 ‘-T seconds’, ‘--timeout=seconds’
----------------------------------------

Set the network timeout to seconds seconds.  This is equivalent to
specifying ‘--dns-timeout’, ‘--connect-timeout’, and ‘--read-timeout’,
all at the same time.

When interacting with the network, Wget2 can check for timeout and abort
the operation if it takes too long.  This prevents anomalies like
hanging reads and infinite connects.  The only timeout enabled by
default is a 900-second read timeout.  Setting a timeout to 0 disables
it altogether.  Unless you know what you are doing, it is best not to
change the default timeout settings.

All timeout-related options accept decimal values, as well as subsecond
values.  For example, 0.1 seconds is a legal (though unwise) choice of
timeout.  Subsecond timeouts are useful for checking server response
times or for testing network latency.


File: wget2.info,  Node: --dns-timeout=seconds,  Next: --connect-timeout=seconds,  Prev: -T seconds --timeout=seconds,  Up: Download Options

5.4.18 ‘--dns-timeout=seconds’
------------------------------

Set the DNS lookup timeout to seconds seconds.  DNS lookups that don’t
complete within the specified time will fail.  By default, there is no
timeout on DNS lookups, other than that implemented by system libraries.


File: wget2.info,  Node: --connect-timeout=seconds,  Next: --read-timeout=seconds,  Prev: --dns-timeout=seconds,  Up: Download Options

5.4.19 ‘--connect-timeout=seconds’
----------------------------------

Set the connect timeout to seconds seconds.  TCP connections that take
longer to establish will be aborted.  By default, there is no connect
timeout, other than that implemented by system libraries.


File: wget2.info,  Node: --read-timeout=seconds,  Next: --limit-rate=amount,  Prev: --connect-timeout=seconds,  Up: Download Options

5.4.20 ‘--read-timeout=seconds’
-------------------------------

Set the read (and write) timeout to seconds seconds.  The “time” of this
timeout refers to idle time: if, at any point in the download, no data
is received for more than the specified number of seconds, reading fails
and the download is restarted.  This option does not directly affect the
duration of the entire download.

Of course, the remote server may choose to terminate the connection
sooner than this option requires.  The default read timeout is 900
seconds.


File: wget2.info,  Node: --limit-rate=amount,  Next: -w seconds --wait=seconds,  Prev: --read-timeout=seconds,  Up: Download Options

5.4.21 ‘--limit-rate=amount’
----------------------------

Limit the download speed to amount bytes per second.  Amount may be
expressed in bytes, kilobytes with the k suffix, or megabytes with the m
suffix.  For example, –limit-rate=20k will limit the retrieval rate to
20KB/s.  This is useful when, for whatever reason, you don’t want Wget2
to consume the entire available bandwidth.

This option allows the use of decimal numbers, usually in conjunction
with power suffixes; for example, –limit-rate=2.5k is a legal value.

Note that Wget2 implements the limiting by sleeping the appropriate
amount of time after a network read that took less time than specified
by the rate.  Eventually this strategy causes the TCP transfer to slow
down to approximately the specified rate.  However, it may take some
time for this balance to be achieved, so don’t be surprised if limiting
the rate doesn’t work well with very small files.


File: wget2.info,  Node: -w seconds --wait=seconds,  Next: --waitretry=seconds,  Prev: --limit-rate=amount,  Up: Download Options

5.4.22 ‘-w seconds’, ‘--wait=seconds’
-------------------------------------

Wait the specified number of seconds between the retrievals.  Use of
this option is recommended, as it lightens the server load by making the
requests less frequent.  Instead of in seconds, the time can be
specified in minutes using the “m” suffix, in hours using “h” suffix, or
in days using “d” suffix.

Specifying a large value for this option is useful if the network or the
destination host is down, so that Wget2 can wait long enough to
reasonably expect the network error to be fixed before the retry.  The
waiting interval specified by this function is influenced by
“–random-wait”, which see.


File: wget2.info,  Node: --waitretry=seconds,  Next: --random-wait,  Prev: -w seconds --wait=seconds,  Up: Download Options

5.4.23 ‘--waitretry=seconds’
----------------------------

If you don’t want Wget2 to wait between every retrieval, but only
between retries of failed downloads, you can use this option.  Wget2
will use linear backoff, waiting 1 second after the first failure on a
given file, then waiting 2 seconds after the second failure on that
file, up to the maximum number of seconds you specify.

By default, Wget2 will assume a value of 10 seconds.


File: wget2.info,  Node: --random-wait,  Next: --no-proxy[=exceptions],  Prev: --waitretry=seconds,  Up: Download Options

5.4.24 ‘--random-wait’
----------------------

Some web sites may perform log analysis to identify retrieval programs
such as Wget2 by looking for statistically significant similarities in
the time between requests.  This option causes the time between requests
to vary between 0.5 and 1.5 ### wait seconds, where wait was specified
using the –wait option, in order to mask Wget2’s presence from such
analysis.

A 2001 article in a publication devoted to development on a popular
consumer platform provided code to perform this analysis on the fly.
Its author suggested blocking at the class C address level to ensure
automated retrieval programs were blocked despite changing DHCP-supplied
addresses.

The ‘--random-wait’ option was inspired by this ill-advised
recommendation to block many unrelated users from a web site due to the
actions of one.


File: wget2.info,  Node: --no-proxy[=exceptions],  Next: -Q quota --quota=quota,  Prev: --random-wait,  Up: Download Options

5.4.25 ‘--no-proxy[=exceptions]’
--------------------------------

If no argument is given, we try to stay backward compatible with Wget1.x
and don’t use proxies, even if the appropriate *_proxy environment
variable is defined.

If a comma-separated list of exceptions (domains/IPs) is given, these
exceptions are accessed without using a proxy.  It overrides the
‘no_proxy’ environment variable.


File: wget2.info,  Node: -Q quota --quota=quota,  Next: --restrict-file-names=modes,  Prev: --no-proxy[=exceptions],  Up: Download Options

5.4.26 ‘-Q quota’, ‘--quota=quota’
----------------------------------

Specify download quota for automatic retrievals.  The value can be
specified in bytes (default), kilobytes (with k suffix), or megabytes
(with m suffix).

Note that quota will never affect downloading a single file.  So if you
specify

  wget2 -Q10k https://example.com/bigfile.gz

all of the ‘bigfile.gz’ will be downloaded.  The same goes even when
several URLs are specified on the command-line.  However, quota is
respected when retrieving either recursively, or from an input file.
Thus you may safely type

  wget2 -Q2m -i sites

download will be aborted when the quota is exceeded.

Setting quota to ‘0’ or to ‘inf’ unlimits the download quota.


File: wget2.info,  Node: --restrict-file-names=modes,  Next: -4 --inet4-only -6 --inet6-only,  Prev: -Q quota --quota=quota,  Up: Download Options

5.4.27 ‘--restrict-file-names=modes’
------------------------------------

Change which characters found in remote URLs must be escaped during
generation of local filenames.  Characters that are restricted by this
option are escaped, i.e. replaced with %HH, where HH is the hexadecimal
number that corresponds to the restricted character.  This option may
also be used to force all alphabetical cases to be either lower- or
uppercase.

By default, Wget2 escapes the characters that are not valid or safe as
part of file names on your operating system, as well as control
characters that are typically unprintable.  This option is useful for
changing these defaults, perhaps because you are downloading to a
non-native partition, or because you want to disable escaping of the
control characters, or you want to further restrict characters to only
those in the ASCII range of values.

The modes are a comma-separated set of text values.  The acceptable
values are unix, windows, nocontrol, ascii, lowercase, and uppercase.
The values unix and windows are mutually exclusive (one will override
the other), as are lowercase and uppercase.  Those last are special
cases, as they do not change the set of characters that would be
escaped, but rather force local file paths to be converted either to
lower- or uppercase.

When “unix” is specified, Wget2 escapes the character / and the control
characters in the ranges 0–31 and 128–159.  This is the default on
Unix-like operating systems.

When “windows” is given, Wget2 escapes the characters , |, /, :, ?, ",
*, <, >, and the control characters in the ranges 0–31 and 128–159.  In
addition to this, Wget2 in Windows mode uses + instead of : to separate
host and port in local file names, and uses @ instead of ?  to separate
the query portion of the file name from the rest.  Therefore, a URL that
would be saved as ‘www.xemacs.org:4300/search.pl?input=blah’ in Unix
mode would be saved as ‘www.xemacs.org+4300/search.pl@input=blah’ in
Windows mode.  This mode is the default on Windows.

If you specify nocontrol, then the escaping of the control characters is
also switched off.  This option may make sense when you are downloading
URLs whose names contain UTF-8 characters, on a system which can save
and display filenames in UTF-8 (some possible byte values used in UTF-8
byte sequences fall in the range of values designated by Wget2 as
“controls”).

The ascii mode is used to specify that any bytes whose values are
outside the range of ASCII characters (that is, greater than 127) shall
be escaped.  This can be useful when saving filenames whose encoding
does not match the one used locally.


File: wget2.info,  Node: -4 --inet4-only -6 --inet6-only,  Next: --prefer-family=none/IPv4/IPv6,  Prev: --restrict-file-names=modes,  Up: Download Options

5.4.28 ‘-4’, ‘--inet4-only’, ‘-6’,
----------------------------------

‘--inet6-only’ Force connecting to IPv4 or IPv6 addresses.  With
–inet4-only or -4, Wget2 will only connect to IPv4 hosts, ignoring AAAA
records in DNS, and refusing to connect to IPv6 addresses specified in
URLs.  Conversely, with –inet6-only or -6, Wget2 will only connect to
IPv6 hosts and ignore A records and IPv4 addresses.

Neither options should be needed normally.  By default, an IPv6-aware
Wget2 will use the address family specified by the host’s DNS record.
If the DNS responds with both IPv4 and IPv6 addresses, Wget2 will try
them in sequence until it finds one it can connect to.  (Also see
“–prefer-family” option described below.)

These options can be used to deliberately force the use of IPv4 or IPv6
address families on dual family systems, usually to aid debugging or to
deal with broken network configuration.  Only one of –inet6-only and
–inet4-only may be specified at the same time.  Neither option is
available in Wget2 compiled without IPv6 support.


File: wget2.info,  Node: --prefer-family=none/IPv4/IPv6,  Next: --tcp-fastopen,  Prev: -4 --inet4-only -6 --inet6-only,  Up: Download Options

5.4.29 ‘--prefer-family=none/IPv4/IPv6’
---------------------------------------

When given a choice of several addresses, connect to the addresses with
specified address family first.  The address order returned by DNS is
used without change by default.

This avoids spurious errors and connect attempts when accessing hosts
that resolve to both IPv6 and IPv4 addresses from IPv4 networks.  For
example, www.kame.net resolves to 2001:200:0:8002:203:47ff:fea5:3085 and
to 203.178.141.194.  When the preferred family is “IPv4”, the IPv4
address is used first; when the preferred family is “IPv6”, the IPv6
address is used first; if the specified value is “none”, the address
order returned by DNS is used without change.

Unlike -4 and -6, this option doesn’t inhibit access to any address
family, it only changes the order in which the addresses are accessed.
Also note that the reordering performed by this option is stable.  It
doesn’t affect order of addresses of the same family.  That is, the
relative order of all IPv4 addresses and of all IPv6 addresses remains
intact in all cases.


File: wget2.info,  Node: --tcp-fastopen,  Next: --dns-cache-preload=file,  Prev: --prefer-family=none/IPv4/IPv6,  Up: Download Options

5.4.30 ‘--tcp-fastopen’
-----------------------

Enable support for TCP Fast Open (TFO) (default: on).

TFO reduces connection latency by 1 RT on “hot” connections (2nd+
connection to the same host in a certain amount of time).

Currently this works on recent Linux and OSX kernels, on HTTP and HTTPS.


File: wget2.info,  Node: --dns-cache-preload=file,  Next: --dns-cache,  Prev: --tcp-fastopen,  Up: Download Options

5.4.31 ‘--dns-cache-preload=file’
---------------------------------

Load a list of IP / Name tuples into the DNS cache.

The format of ‘file’ is like ‘/etc/hosts’: IP-address whitespace Name

This allows to save domain name lookup time, which is a bottleneck in
some use cases.  Also, the use of HOSTALIASES (which is not portable)
can be mimiced by this option.


File: wget2.info,  Node: --dns-cache,  Next: --retry-connrefused,  Prev: --dns-cache-preload=file,  Up: Download Options

5.4.32 ‘--dns-cache’
--------------------

Enable DNS caching (default: on).

Normally, Wget2 remembers the IP addresses it looked up from DNS so it
doesn’t have to repeatedly contact the DNS server for the same
(typically small) set of hosts it retrieves from.  This cache exists in
memory only; a new Wget2 run will contact DNS again.

However, it has been reported that in some situations it is not
desirable to cache host names, even for the duration of a short-running
application like Wget2.  With ‘--no-dns-cache’ Wget2 issues a new DNS
lookup (more precisely, a new call to “gethostbyname” or “getaddrinfo”)
each time it makes a new connection.  Please note that this option will
not affect caching that might be performed by the resolving library or
by an external caching layer, such as NSCD.


File: wget2.info,  Node: --retry-connrefused,  Next: --user=user --password=password,  Prev: --dns-cache,  Up: Download Options

5.4.33 ‘--retry-connrefused’
----------------------------

Consider “connection refused” a transient error and try again.  Normally
Wget2 gives up on a URL when it is unable to connect to the site because
failure to connect is taken as a sign that the server is not running at
all and that retries would not help.  This option is for mirroring
unreliable sites whose servers tend to disappear for short periods of
time.


File: wget2.info,  Node: --user=user --password=password,  Next: --ask-password,  Prev: --retry-connrefused,  Up: Download Options

5.4.34 ‘--user=user’, ‘--password=password’
-------------------------------------------

Specify the username user and password password for HTTP file retrieval.
This overrides the lookup of credentials in the .netrc file (–netrc is
enabled by default).  These parameters can be overridden using the
–http-user and –http-password options for HTTP(S) connections.

If neither –http-proxy-user nor –http-proxy-password is given these
settings are also taken for proxy authentication.


File: wget2.info,  Node: --ask-password,  Next: --use-askpass=command,  Prev: --user=user --password=password,  Up: Download Options

5.4.35 ‘--ask-password’
-----------------------

Prompt for a password on the command line.  Overrides the password set
by –password (if any).


File: wget2.info,  Node: --use-askpass=command,  Next: --no-iri,  Prev: --ask-password,  Up: Download Options

5.4.36 ‘--use-askpass=command’
------------------------------

Prompt for a user and password using the specified command.  Overrides
the user and/or password set by –user/–password (if any).


File: wget2.info,  Node: --no-iri,  Next: --local-encoding=encoding,  Prev: --use-askpass=command,  Up: Download Options

5.4.37 ‘--no-iri’
-----------------

Turn off internationalized URI (IRI) support.  Use –iri to turn it on.
IRI support is activated by default.

You can set the default state of IRI support using the “iri” command in
.wgetrc.  That setting may be overridden from the command line.


File: wget2.info,  Node: --local-encoding=encoding,  Next: --remote-encoding=encoding,  Prev: --no-iri,  Up: Download Options

5.4.38 ‘--local-encoding=encoding’
----------------------------------

Force Wget2 to use encoding as the default system encoding.  That
affects how Wget2 converts URLs specified as arguments from locale to
UTF-8 for IRI support.

Wget2 use the function “nl_langinfo()” and then the “CHARSET”
environment variable to get the locale.  If it fails, ASCII is used.


File: wget2.info,  Node: --remote-encoding=encoding,  Next: --input-encoding=encoding,  Prev: --local-encoding=encoding,  Up: Download Options

5.4.39 ‘--remote-encoding=encoding’
-----------------------------------

Force Wget2 to use encoding as the default remote server encoding.  That
affects how Wget2 converts URIs found in files from remote encoding to
UTF-8 during a recursive fetch.  This options is only useful for IRI
support, for the interpretation of non-ASCII characters.

For HTTP, remote encoding can be found in HTTP “Content-Type” header and
in HTML “Content-Type http-equiv” meta tag.


File: wget2.info,  Node: --input-encoding=encoding,  Next: --unlink,  Prev: --remote-encoding=encoding,  Up: Download Options

5.4.40 ‘--input-encoding=encoding’
----------------------------------

Use the specified encoding for the URLs read from ‘--input-file’.  The
default is the local encoding.


File: wget2.info,  Node: --unlink,  Next: --cut-url-get-vars,  Prev: --input-encoding=encoding,  Up: Download Options

5.4.41 ‘--unlink’
-----------------

Force Wget2 to unlink file instead of clobbering existing file.  This
option is useful for downloading to the directory with hardlinks.


File: wget2.info,  Node: --cut-url-get-vars,  Next: --cut-file-get-vars,  Prev: --unlink,  Up: Download Options

5.4.42 ‘--cut-url-get-vars’
---------------------------

Remove HTTP GET Variables from URLs.  For example “main.css?v=123” will
be changed to “main.css”.  Be aware that this may have unintended side
effects, for example “image.php?name=sun” will be changed to
“image.php”.  The cutting happens before adding the URL to the download
queue.


File: wget2.info,  Node: --cut-file-get-vars,  Next: --chunk-size=size,  Prev: --cut-url-get-vars,  Up: Download Options

5.4.43 ‘--cut-file-get-vars’
----------------------------

Remove HTTP GET Variables from filenames.  For example “main.css?v=123”
will be changed to “main.css”.

Be aware that this may have unintended side effects, for example
“image.php?name=sun” will be changed to “image.php”.  The cutting
happens when saving the file, after downloading.

File names obtained from a “Content-Disposition” header are not affected
by this setting (see –content-disposition), and can be a solution for
this problem.

When “–trust-server-names” is used, the redirection URL is affected by
this setting.


File: wget2.info,  Node: --chunk-size=size,  Next: --max-threads=number,  Prev: --cut-file-get-vars,  Up: Download Options

5.4.44 ‘--chunk-size=size’
--------------------------

Download large files in multithreaded chunks.  This switch specifies the
size of the chunks, given in bytes if no other byte multiple unit is
specified.  By default it’s set on 0/off.


File: wget2.info,  Node: --max-threads=number,  Next: -s --verify-sig[=fail|no-fail],  Prev: --chunk-size=size,  Up: Download Options

5.4.45 ‘--max-threads=number’
-----------------------------

Specifies the maximum number of concurrent download threads for a
resource.  The default is 5 but if you want to allow more or fewer this
is the option to use.


File: wget2.info,  Node: -s --verify-sig[=fail|no-fail],  Next: --signature-extensions,  Prev: --max-threads=number,  Up: Download Options

5.4.46 ‘-s’, ‘--verify-sig[=fail|no-fail]’
------------------------------------------

Enable PGP signature verification (when not prefixed with ‘no-’).  When
enabled Wget2 will attempt to download and verify PGP signatures against
their corresponding files.  Any file downloaded that has a content type
beginning with ‘application/’ will cause Wget2 to request the signature
for that file.

The name of the signature file is computed by appending the extension to
the full path of the file that was just downloaded.  The extension used
is defined by the ‘--signature-extensions’ option.  If the content type
for the signature request is ‘application/pgp-signature’, Wget2 will
attempt to verify the signature against the original file.  By default,
if a signature file cannot be found (I.E. the request for it gets a 404
status code) Wget2 will exit with an error code.

This behavior can be tuned using the following arguments: * ‘fail’: This
is the default, meaning that this is the value when you supply the flag
without an argument.  Indicates that missing signature files will cause
Wget2 to exit with an error code.  * ‘no-fail’: This value allows
missing signature files.  A 404 message will still be issued, but the
program will exit normally (assuming no unrelated errors).

Additionally, ‘--no-verify-sig’ disables signature checking altogether
‘--no-verify-sig’ does not allow any arguments.


File: wget2.info,  Node: --signature-extensions,  Next: --gnupg-homedir,  Prev: -s --verify-sig[=fail|no-fail],  Up: Download Options

5.4.47 ‘--signature-extensions’
-------------------------------

Specify the file extensions for signature files, without the leading
“.”.  You may specify multiple extensions as a comma separated list.
All the provided extensions will be tried simultaneously when looking
for the signature file.  The default is “sig”.


File: wget2.info,  Node: --gnupg-homedir,  Next: --verify-save-failed,  Prev: --signature-extensions,  Up: Download Options

5.4.48 ‘--gnupg-homedir’
------------------------

Specifies the gnupg home directory to use when verifying PGP signatures
on downloaded files.  The default for this is your system’s default home
directory.


File: wget2.info,  Node: --verify-save-failed,  Next: --xattr,  Prev: --gnupg-homedir,  Up: Download Options

5.4.49 ‘--verify-save-failed’
-----------------------------

Instructs Wget2 to keep files that don’t pass PGP signature validation.
The default is to delete files that fail validation.


File: wget2.info,  Node: --xattr,  Next: --metalink,  Prev: --verify-save-failed,  Up: Download Options

5.4.50 ‘--xattr’
----------------

Saves documents metadata as “user POSIX Extended Attributes” (default:
on).  This feature only works if the file system supports it.  More info
on https://freedesktop.org/wiki/CommonExtendedAttributes.

Wget2 currently sets * user.xdg.origin.url * user.xdg.referrer.url *
user.mime_type * user.charset

To display the extended attributes of a file (Linux): ‘getfattr -d
<file>’


File: wget2.info,  Node: --metalink,  Next: --fsync-policy,  Prev: --xattr,  Up: Download Options

5.4.51 ‘--metalink’
-------------------

Follow/process metalink URLs without saving them (default: on).

Metalink files describe downloads incl. mirrors, files, checksums,
signatures.  This allows chunked downloads, automatically taking the
nearest mirrors, preferring the fastest mirrors and checking the
download for integrity.


File: wget2.info,  Node: --fsync-policy,  Next: --http2-request-window=number,  Prev: --metalink,  Up: Download Options

5.4.52 ‘--fsync-policy’
-----------------------

Enables disk syncing after each write (default: off).


File: wget2.info,  Node: --http2-request-window=number,  Next: --keep-extension,  Prev: --fsync-policy,  Up: Download Options

5.4.53 ‘--http2-request-window=number’
--------------------------------------

Set max.  number of parallel streams per HTTP/2 connection (default:
30).


File: wget2.info,  Node: --keep-extension,  Prev: --http2-request-window=number,  Up: Download Options

5.4.54 ‘--keep-extension’
-------------------------

This option changes the behavior for creating a unique filename if a
file already exists.

The standard (default) pattern for file names is ‘<filename>.<N>’, the
new pattern is ‘<basename>_<N>.<ext>’.

The idea is to use such files without renaming when the use depends on
the extension, like on Windows.

This option doesn not change the behavior of ‘--backups’.


File: wget2.info,  Node: Directory Options,  Next: HTTP Options,  Prev: Download Options,  Up: Options

5.5 Directory Options
=====================

* Menu:

* -nd --no-directories::
* -x --force-directories::
* -nH --no-host-directories::
* --protocol-directories::
* --cut-dirs=number::
* -P prefix --directory-prefix=prefix::


File: wget2.info,  Node: -nd --no-directories,  Next: -x --force-directories,  Up: Directory Options

5.5.1 ‘-nd’, ‘--no-directories’
-------------------------------

Do not create a hierarchy of directories when retrieving recursively.
With this option turned on, all files will get saved to the current
directory, without clobbering (if a name shows up more than once, the
filenames will get extensions .n).


File: wget2.info,  Node: -x --force-directories,  Next: -nH --no-host-directories,  Prev: -nd --no-directories,  Up: Directory Options

5.5.2 ‘-x’, ‘--force-directories’
---------------------------------

The opposite of ‘-nd’: create a hierarchy of directories, even if one
would not have been created otherwise.  E.g.  ‘wget2 -x
https://example.com/robots.txt’ will save the downloaded file to
‘example.com/robots.txt’.


File: wget2.info,  Node: -nH --no-host-directories,  Next: --protocol-directories,  Prev: -x --force-directories,  Up: Directory Options

5.5.3 ‘-nH’, ‘--no-host-directories’
------------------------------------

Disable generation of host-prefixed directories.  By default, invoking
Wget2 with ‘-r https://example.com/’ will create a structure of
directories beginning with ‘example.com/’.  This option disables such
behavior.


File: wget2.info,  Node: --protocol-directories,  Next: --cut-dirs=number,  Prev: -nH --no-host-directories,  Up: Directory Options

5.5.4 ‘--protocol-directories’
------------------------------

Use the protocol name as a directory component of local file names.  For
example, with this option, ‘wget2 -r https://example.com’ will save to
‘https/example.com/...’ rather than just to ‘example.com/...’.


File: wget2.info,  Node: --cut-dirs=number,  Next: -P prefix --directory-prefix=prefix,  Prev: --protocol-directories,  Up: Directory Options

5.5.5 ‘--cut-dirs=number’
-------------------------

Ignore a number of directory components.  This is useful for getting a
fine-grained control over the directory where recursive retrieval will
be saved.

Take, for example, the directory at https://example.com/pub/sub/.  If
you retrieve it with ‘-r’, it will be saved locally under
‘example.com/pub/sub/’.  While the ‘-nH’ option can remove the
‘example.com/’ part, you are still stuck with ‘pub/sub/’.  This is where
‘--cut-dirs’ comes in handy; it makes Wget2 not “see” a number of remote
directory components.  Here are several examples of how ‘--cut-dirs’
option works.  ‘No options -> example.com/pub/sub/ --cut-dirs=1 ->
example.com/sub/ --cut-dirs=2 -> example.com/ -nH -> pub/sub/ -nH
--cut-dirs=1 -> sub/ -nH --cut-dirs=2 -> .’ If you just want to get rid
of the directory structure, this option is similar to a combination of
‘-nd’ and ‘-P’.  However, unlike ‘-nd’, ‘--cut-dirs’ does not lose with
subdirectories.  For instance, with ‘-nH --cut-dirs=1’, a ‘beta/’
subdirectory will be placed to ‘sub/beta/’, as one would expect.


File: wget2.info,  Node: -P prefix --directory-prefix=prefix,  Prev: --cut-dirs=number,  Up: Directory Options

5.5.6 ‘-P prefix’, ‘--directory-prefix=prefix’
----------------------------------------------

Set directory prefix to prefix.  The directory prefix is the directory
where all other files and subdirectories will be saved to, i.e. the top
of the retrieval tree.  The default is ‘.’, the current directory.  If
the directory ‘prefix’ doesn’t exist, it will be created.


File: wget2.info,  Node: HTTP Options,  Next: HTTPS SSL/TLS Options,  Prev: Directory Options,  Up: Options

5.6 HTTP Options
================

* Menu:

* --default-page=name::
* --default-http-port=port::
* --default-https-port=port::
* -E --adjust-extension::
* --http-user=user --http-password=password::
* --http-proxy-user=user --http-proxy-password=password::
* --http-proxy=proxies::
* --https-proxy=proxies::
* --no-http-keep-alive::
* --no-cache::
* --no-cookies::
* --load-cookies file::
* --save-cookies file::
* --keep-session-cookies::
* --cookie-suffixes=file::
* --ignore-length::
* --header=header-line::
* --max-redirect=number::
* --proxy-user=user --proxy-password=password [Not implemented use --http-proxy-password]::
* --referer=url::
* --save-headers::
* -U agent-string --user-agent=agent-string::
* --post-data=string --post-file=file::
* --method=HTTP-Method::
* --body-data=Data-String --body-file=Data-File::
* --content-disposition::
* --content-on-error::
* --save-content-on::
* --trust-server-names::
* --auth-no-challenge::
* --compression=TYPE::
* --download-attr=[strippath|usepath]::


File: wget2.info,  Node: --default-page=name,  Next: --default-http-port=port,  Up: HTTP Options

5.6.1 ‘--default-page=name’
---------------------------

Use name as the default file name when it isn’t known (i.e., for URLs
that end in a slash), instead of ‘index.html’.


File: wget2.info,  Node: --default-http-port=port,  Next: --default-https-port=port,  Prev: --default-page=name,  Up: HTTP Options

5.6.2 ‘--default-http-port=port’
--------------------------------

Set the default port for HTTP URLs (default: 80).

This is mainly for testing purposes.


File: wget2.info,  Node: --default-https-port=port,  Next: -E --adjust-extension,  Prev: --default-http-port=port,  Up: HTTP Options

5.6.3 ‘--default-https-port=port’
---------------------------------

Set the default port for HTTPS URLs (default: 443).

This is mainly for testing purposes.


File: wget2.info,  Node: -E --adjust-extension,  Next: --http-user=user --http-password=password,  Prev: --default-https-port=port,  Up: HTTP Options

5.6.4 ‘-E’, ‘--adjust-extension’
--------------------------------

If a file of type ‘application/xhtml+xml’ or ‘text/html’ is downloaded
and the URL does not end with the regexp ‘\.[Hh][Tt][Mm][Ll]?’, this
option will cause the suffix ‘.html’ to be appended to the local
filename.  This is useful, for instance, when you’re mirroring a remote
site that uses .asp pages, but you want the mirrored pages to be
viewable on your stock Apache server.  Another good use for this is when
you’re downloading CGI-generated materials.  A URL like
‘https://example.com/article.cgi?25’ will be saved as
‘article.cgi?25.html’.

Note that filenames changed in this way will be re-downloaded every time
you re-mirror a site, because Wget2 can’t tell that the local ‘X.html’
file corresponds to remote URL X (since it doesn’t yet know that the URL
produces output of type ‘text/html’ or ‘application/xhtml+xml’.

Wget2 will also ensure that any downloaded files of type ‘text/css’ end
in the suffix ‘.css’.

At some point in the future, this option may well be expanded to include
suffixes for other types of content, including content types that are
not parsed by Wget.


File: wget2.info,  Node: --http-user=user --http-password=password,  Next: --http-proxy-user=user --http-proxy-password=password,  Prev: -E --adjust-extension,  Up: HTTP Options

5.6.5 ‘--http-user=user’, ‘--http-password=password’
----------------------------------------------------

Specify the user and password for HTTP authentication.  According to the
type of the challenge, Wget will encode them using either the “basic”
(insecure), the “digest”, or the Windows “NTLM” authentication scheme.

If possible, put your credentials into ‘~/.netrc’ (see also ‘--netrc’
and ‘--netrc-file’ options) or into ‘~/.wgetrc’.  This is far more
secure than using the command line which can be seen by any other user.
If the passwords are really important, do not leave them lying in those
files either.  Edit the files and delete them after Wget2 has started
the download.

Also see ‘--use-askpass’ and ‘--ask-password’ for an interactive method
to provide your password.


File: wget2.info,  Node: --http-proxy-user=user --http-proxy-password=password,  Next: --http-proxy=proxies,  Prev: --http-user=user --http-password=password,  Up: HTTP Options

5.6.6 ‘--http-proxy-user=user’,
-------------------------------

‘--http-proxy-password=password’ Specify the user and password for HTTP
proxy authentication.  See ‘--http-user’ for details.


File: wget2.info,  Node: --http-proxy=proxies,  Next: --https-proxy=proxies,  Prev: --http-proxy-user=user --http-proxy-password=password,  Up: HTTP Options

5.6.7 ‘--http-proxy=proxies’
----------------------------

Set comma-separated list of HTTP proxies.  The environment variable
‘http_proxy’ will be overridden.

Exceptions can be set via the environment variable ‘no_proxy’ or via
‘--no-proxy’.


File: wget2.info,  Node: --https-proxy=proxies,  Next: --no-http-keep-alive,  Prev: --http-proxy=proxies,  Up: HTTP Options

5.6.8 ‘--https-proxy=proxies’
-----------------------------

Set comma-separated list of HTTPS proxies.  The environment variable
‘https_proxy’ will be overridden.

Exceptions can be set via the environment variable ‘no_proxy’ or via
‘--no-proxy’.


File: wget2.info,  Node: --no-http-keep-alive,  Next: --no-cache,  Prev: --https-proxy=proxies,  Up: HTTP Options

5.6.9 ‘--no-http-keep-alive’
----------------------------

Turn off the “keep-alive” feature for HTTP(S) downloads.  Normally,
Wget2 asks the server to keep the connection open so that, when you
download more than one document from the same server, they get
transferred over the same TCP connection.  This saves time and at the
same time reduces the load on the server.

This option is useful when, for some reason, persistent (keep-alive)
connections don’t work for you, for example due to a server bug or due
to the inability of server-side scripts to cope with the connections.


File: wget2.info,  Node: --no-cache,  Next: --no-cookies,  Prev: --no-http-keep-alive,  Up: HTTP Options

5.6.10 ‘--no-cache’
-------------------

Disable server-side cache.  In this case, Wget2 will send the remote
server appropriate directives (Cache-Control: no- cache and Pragma:
no-cache) to get the file from the remote service, rather than returning
the cached version.  This is especially useful for retrieving and
flushing out-of-date documents on proxy servers.

Caching is allowed by default.


File: wget2.info,  Node: --no-cookies,  Next: --load-cookies file,  Prev: --no-cache,  Up: HTTP Options

5.6.11 ‘--no-cookies’
---------------------

Disable the use of cookies.  Cookies are a mechanism for maintaining
server-side state.  The server sends the client a cookie using the
“Set-Cookie” header, and the client responds with the same cookie upon
further requests.  Since cookies allow the server owners to keep track
of visitors and for sites to exchange this information, some consider
them a breach of privacy.  The default is to use cookies; however,
storing cookies is not on by default.


File: wget2.info,  Node: --load-cookies file,  Next: --save-cookies file,  Prev: --no-cookies,  Up: HTTP Options

5.6.12 ‘--load-cookies file’
----------------------------

Load cookies from ‘file’ before the first HTTP(S) retrieval.  file is a
textual file in the format originally used by Netscape’s cookies.txt
file.

You will typically use this option when mirroring sites that require
that you be logged in to access some or all of their content.  The login
process typically works by the web server issuing an HTTP cookie upon
receiving and verifying your credentials.  The cookie is then resent by
the browser when accessing that part of the site, and so proves your
identity.

Mirroring such a site requires Wget2 to send the same cookies your
browser sends when communicating with the site.  This is achieved by
–load-cookies: simply point Wget2 to the location of the cookies.txt
file, and it will send the same cookies your browser would send in the
same situation.  Different browsers keep textual cookie files in
different locations:

“Netscape 4.x.” The cookies are in ~/.netscape/cookies.txt.

“Mozilla and Netscape 6.x.” Mozilla’s cookie file is also named
cookies.txt, located somewhere under ~/.mozilla, in the directory of
your profile.  The full path usually ends up looking somewhat like
~/.mozilla/default/some-weird- string/cookies.txt.

“Internet Explorer.” You can produce a cookie file Wget2 can use by
using the File menu, Import and Export, Export Cookies.  This has been
tested with Internet Explorer 5; it is not guaranteed to work with
earlier versions.

“Other browsers.” If you are using a different browser to create your
cookies, –load-cookies will only work if you can locate or produce a
cookie file in the Netscape format that Wget2 expects.

If you cannot use ‘--load-cookies’, there might still be an alternative.
If your browser supports a “cookie manager”, you can use it to view the
cookies used when accessing the site you’re mirroring.  Write down the
name and value of the cookie, and manually instruct Wget2 to send those
cookies, bypassing the “official” cookie support:

  wget2 --no-cookies --header "Cookie: <name>=<value>"


File: wget2.info,  Node: --save-cookies file,  Next: --keep-session-cookies,  Prev: --load-cookies file,  Up: HTTP Options

5.6.13 ‘--save-cookies file’
----------------------------

Save cookies to ‘file’ before exiting.  This will not save cookies that
have expired or that have no expiry time (so-called “session cookies”),
but also see –keep-session-cookies.


File: wget2.info,  Node: --keep-session-cookies,  Next: --cookie-suffixes=file,  Prev: --save-cookies file,  Up: HTTP Options

5.6.14 ‘--keep-session-cookies’
-------------------------------

When specified, causes –save-cookies to also save session cookies.
Session cookies are normally not saved because they are meant to be kept
in memory and forgotten when you exit the browser.  Saving them is
useful on sites that require you to log in or to visit the home page
before you can access some pages.  With this option, multiple Wget2 runs
are considered a single browser session as far as the site is concerned.

Since the cookie file format does not normally carry session cookies,
Wget2 marks them with an expiry timestamp of 0.  Wget2’s –load-cookies
recognizes those as session cookies, but it might confuse other
browsers.  Also note that cookies so loaded will be treated as other
session cookies, which means that if you want –save-cookies to preserve
them again, you must use –keep-session-cookies again.


File: wget2.info,  Node: --cookie-suffixes=file,  Next: --ignore-length,  Prev: --keep-session-cookies,  Up: HTTP Options

5.6.15 ‘--cookie-suffixes=file’
-------------------------------

Load the public suffixes used for cookie checking from the given file.

Normally, the underlying libpsl loads this data from a system file or it
has the data built in.  In some cases you might want to load an updated
PSL, e.g. from https://publicsuffix.org/list/public_suffix_list.dat.

The PSL allows to prevent setting of “super-cookies” that lead to cookie
privacy leakage.  More details can be found on
https://publicsuffix.org/.


File: wget2.info,  Node: --ignore-length,  Next: --header=header-line,  Prev: --cookie-suffixes=file,  Up: HTTP Options

5.6.16 ‘--ignore-length’
------------------------

Unfortunately, some HTTP servers (CGI programs, to be more precise) send
out bogus “Content-Length” headers, which makes Wget2 go wild, as it
thinks not all the document was retrieved.  You can spot this syndrome
if Wget retries getting the same document again and again, each time
claiming that the (otherwise normal) connection has closed on the very
same byte.

With this option, Wget2 will ignore the “Content-Length” header as if it
never existed.


File: wget2.info,  Node: --header=header-line,  Next: --max-redirect=number,  Prev: --ignore-length,  Up: HTTP Options

5.6.17 ‘--header=header-line’
-----------------------------

Send header-line along with the rest of the headers in each HTTP
request.  The supplied header is sent as-is, which means it must contain
name and value separated by colon, and must not contain newlines.

You may define more than one additional header by specifying –header
more than once.

  wget2 --header='Accept-Charset: iso-8859-2' \
       --header='Accept-Language: hr'        \
         https://example.com/

Specification of an empty string as the header value will clear all
previous user-defined headers.

This option can be used to override headers otherwise generated
automatically.  This example instructs Wget2 to connect to localhost,
but to specify ‘example.com’ in the “Host” header:

  wget2 --header="Host: example.com" http://localhost/


File: wget2.info,  Node: --max-redirect=number,  Next: --proxy-user=user --proxy-password=password [Not implemented use --http-proxy-password],  Prev: --header=header-line,  Up: HTTP Options

5.6.18 ‘--max-redirect=number’
------------------------------

Specifies the maximum number of redirections to follow for a resource.
The default is 20, which is usually far more than necessary.  However,
on those occasions where you want to allow more (or fewer), this is the
option to use.


File: wget2.info,  Node: --proxy-user=user --proxy-password=password [Not implemented use --http-proxy-password],  Next: --referer=url,  Prev: --max-redirect=number,  Up: HTTP Options

5.6.19 ‘--proxy-user=user’, ‘--proxy-password=password’
-------------------------------------------------------

[Not implemented, use ‘--http-proxy-password’] Specify the username user
and password password for authentication on a proxy server.  Wget2 will
encode them using the “basic” authentication scheme.

Security considerations similar to those with ‘--http-password’ pertain
here as well.


File: wget2.info,  Node: --referer=url,  Next: --save-headers,  Prev: --proxy-user=user --proxy-password=password [Not implemented use --http-proxy-password],  Up: HTTP Options

5.6.20 ‘--referer=url’
----------------------

Include ‘Referer: url’ header in HTTP request.  Useful for retrieving
documents with server-side processing that assume they are always being
retrieved by interactive web browsers and only come out properly when
Referer is set to one of the pages that point to them.


File: wget2.info,  Node: --save-headers,  Next: -U agent-string --user-agent=agent-string,  Prev: --referer=url,  Up: HTTP Options

5.6.21 ‘--save-headers’
-----------------------

Save the headers sent by the HTTP server to the file, preceding the
actual contents, with an empty line as the separator.


File: wget2.info,  Node: -U agent-string --user-agent=agent-string,  Next: --post-data=string --post-file=file,  Prev: --save-headers,  Up: HTTP Options

5.6.22 ‘-U agent-string’, ‘--user-agent=agent-string’
-----------------------------------------------------

Identify as agent-string to the HTTP server.

The HTTP protocol allows the clients to identify themselves using a
“User-Agent” header field.  This enables distinguishing the WWW
software, usually for statistical purposes or for tracing of protocol
violations.  Wget normally identifies as Wget/version, version being the
current version number of Wget.

However, some sites have been known to impose the policy of tailoring
the output according to the “User-Agent”-supplied information.  While
this is not such a bad idea in theory, it has been abused by servers
denying information to clients other than (historically) Netscape or,
more frequently, Microsoft Internet Explorer.  This option allows you to
change the “User-Agent” line issued by Wget.  Use of this option is
discouraged, unless you really know what you are doing.

Specifying empty user agent with –user-agent="" instructs Wget2 not to
send the “User-Agent” header in HTTP requests.


File: wget2.info,  Node: --post-data=string --post-file=file,  Next: --method=HTTP-Method,  Prev: -U agent-string --user-agent=agent-string,  Up: HTTP Options

5.6.23 ‘--post-data=string’, ‘--post-file=file’
-----------------------------------------------

Use POST as the method for all HTTP requests and send the specified data
in the request body.  –post-data sends string as data, whereas
–post-file sends the contents of file.  Other than that, they work in
exactly the same way.  In particular, they both expect content of the
form “key1=value1&key2=value2”, with percent-encoding for special
characters; the only difference is that one expects its content as a
command-line parameter and the other accepts its content from a file.
In particular, –post-file is not for transmitting files as form
attachments: those must appear as “key=value” data (with appropriate
percent-coding) just like everything else.  Wget2 does not currently
support “multipart/form-data” for transmitting POST data; only
“application/x-www-form-urlencoded”.  Only one of –post-data and
–post-file should be specified.

Please note that wget2 does not require the content to be of the form
“key1=value1&key2=value2”, and neither does it test for it.  Wget2 will
simply transmit whatever data is provided to it.  Most servers however
expect the POST data to be in the above format when processing HTML
Forms.

When sending a POST request using the ‘--post-file’ option, Wget2 treats
the file as a binary file and will send every character in the POST
request without stripping trailing newline or formfeed characters.  Any
other control characters in the text will also be sent as-is in the POST
request.

Please be aware that Wget2 needs to know the size of the POST data in
advance.  Therefore the argument to “–post-file” must be a regular file;
specifying a FIFO or something like /dev/stdin won’t work.  It’s not
quite clear how to work around this limitation inherent in HTTP/1.0.
Although HTTP/1.1 introduces chunked transfer that doesn’t require
knowing the request length in advance, a client can’t use chunked unless
it knows it’s talking to an HTTP/1.1 server.  And it can’t know that
until it receives a response, which in turn requires the request to have
been completed – a chicken-and-egg problem.

If Wget2 is redirected after the POST request is completed, its
behaviour depends on the response code returned by the server.  In case
of a 301 Moved Permanently, 302 Moved Temporarily or 307 Temporary
Redirect, Wget2 will, in accordance with RFC2616, continue to send a
POST request.  In case a server wants the client to change the Request
method upon redirection, it should send a 303 See Other response code.

This example shows how to log in to a server using POST and then proceed
to download the desired pages, presumably only accessible to authorized
users:

  # Log in to the server.  This can be done only once.
  wget2 --save-cookies cookies.txt \
       --post-data  'user=foo&password=bar' \
       http://example.com/auth.php

  # Now grab the page or pages we care about.
  wget2 --load-cookies cookies.txt \
       -p http://example.com/interesting/article.php

If the server is using session cookies to track user authentication, the
above will not work because ‘--save-cookies’ will not save them (and
neither will browsers) and the cookies.txt file will be empty.  In that
case use –keep-session-cookies along with –save-cookies to force saving
of session cookies.


File: wget2.info,  Node: --method=HTTP-Method,  Next: --body-data=Data-String --body-file=Data-File,  Prev: --post-data=string --post-file=file,  Up: HTTP Options

5.6.24 ‘--method=HTTP-Method’
-----------------------------

For the purpose of RESTful scripting, Wget2 allows sending of other HTTP
Methods without the need to explicitly set them using
–header=Header-Line.  Wget2 will use whatever string is passed to it
after –method as the HTTP Method to the server.


File: wget2.info,  Node: --body-data=Data-String --body-file=Data-File,  Next: --content-disposition,  Prev: --method=HTTP-Method,  Up: HTTP Options

5.6.25 ‘--body-data=Data-String’, ‘--body-file=Data-File’
---------------------------------------------------------

Must be set when additional data needs to be sent to the server along
with the Method specified using ‘--method’.  ‘--body-data’ sends string
as data, whereas –body-file sends the contents of file.  Other than
that, they work in exactly the same way.

Currently, ‘--body-file’ is not for transmitting files as a whole.
Wget2 does not currently support “multipart/form-data” for transmitting
data; only “application/x-www-form-urlencoded”.  In the future, this may
be changed so that wget2 sends the –body-file as a complete file instead
of sending its contents to the server.  Please be aware that Wget2 needs
to know the contents of BODY Data in advance, and hence the argument to
–body-file should be a regular file.  See –post-file for a more detailed
explanation.  Only one of –body-data and –body-file should be specified.

If Wget2 is redirected after the request is completed, Wget2 will
suspend the current method and send a GET request till the redirection
is completed.  This is true for all redirection response codes except
307 Temporary Redirect which is used to explicitly specify that the
request method should not change.  Another exception is when the method
is set to “POST”, in which case the redirection rules specified under
‘--post-data’ are followed.


File: wget2.info,  Node: --content-disposition,  Next: --content-on-error,  Prev: --body-data=Data-String --body-file=Data-File,  Up: HTTP Options

5.6.26 ‘--content-disposition’
------------------------------

If this is set to on, experimental (not fully-functional) support for
“Content-Disposition” headers is enabled.  This can currently result in
extra round-trips to the server for a “HEAD” request, and is known to
suffer from a few bugs, which is why it is not currently enabled by
default.

This option is useful for some file-downloading CGI programs that use
“Content-Disposition” headers to describe what the name of a downloaded
file should be.


File: wget2.info,  Node: --content-on-error,  Next: --save-content-on,  Prev: --content-disposition,  Up: HTTP Options

5.6.27 ‘--content-on-error’
---------------------------

If this is set to on, wget2 will not skip the content when the server
responds with a http status code that indicates error.


File: wget2.info,  Node: --save-content-on,  Next: --trust-server-names,  Prev: --content-on-error,  Up: HTTP Options

5.6.28 ‘--save-content-on’
--------------------------

This takes a comma-separated list of HTTP status codes to save the
content for.

You can use ’*’ for ANY. An exclamation mark (!)  in front of a code
means ‘exception’.

Example 1: ‘--save-content-on="*,!404"’ would save the content on any
HTTP status, except for 404.

Example 2: ‘--save-content-on=404’ would save the content only on HTTP
status 404.

The older ‘--content-on-error’ behaves like ‘--save-content-on=*’.


File: wget2.info,  Node: --trust-server-names,  Next: --auth-no-challenge,  Prev: --save-content-on,  Up: HTTP Options

5.6.29 ‘--trust-server-names’
-----------------------------

If this is set to on, on a redirect the last component of the
redirection URL will be used as the local file name.  By default it is
used the last component in the original URL.


File: wget2.info,  Node: --auth-no-challenge,  Next: --compression=TYPE,  Prev: --trust-server-names,  Up: HTTP Options

5.6.30 ‘--auth-no-challenge’
----------------------------

If this option is given, Wget2 will send Basic HTTP authentication
information (plaintext username and password) for all requests.

Use of this option is not recommended, and is intended only to support
some few obscure servers, which never send HTTP authentication
challenges, but accept unsolicited auth info, say, in addition to
form-based authentication.


File: wget2.info,  Node: --compression=TYPE,  Next: --download-attr=[strippath|usepath],  Prev: --auth-no-challenge,  Up: HTTP Options

5.6.31 ‘--compression=TYPE’
---------------------------

If this TYPE(‘identity’, ‘gzip’, ‘deflate’, ‘xz’, ‘lzma’, ‘br’, ‘bzip2’,
‘zstd’, ‘lzip’ or any combination of it) is given, Wget2 will set
“Accept-Encoding” header accordingly.  ‘--no-compression’ means no
“Accept-Encoding” header at all.  To set “Accept-Encoding” to a custom
value, use ‘--no-compression’ in combination with
‘--header="Accept-Encoding: xxx"’.

Compatibility-Note: ‘none’ type in Wget 1.X has the same meaning as
‘identity’ type in Wget2.


File: wget2.info,  Node: --download-attr=[strippath|usepath],  Prev: --compression=TYPE,  Up: HTTP Options

5.6.32 ‘--download-attr=[strippath|usepath]’
--------------------------------------------

The ‘download’ HTML5 attribute may specify (or better: suggest) a file
name for the ‘href’ URL in ‘a’ and ‘area’ tags.  This option tells Wget2
to make use of this file name when saving.  The two possible values are
‘strippath’ to strip the path from the file name.  This is the default.

The value ‘usepath’ takes the file name as as including the directory.
This is very dangerous and we can’t stress enough not to use it on
untrusted input or servers !  Only use this if you really trust the
input or the server.


File: wget2.info,  Node: HTTPS SSL/TLS Options,  Next: Recursive Retrieval Options,  Prev: HTTP Options,  Up: Options

5.7 HTTPS (SSL/TLS) Options
===========================

To support encrypted HTTP (HTTPS) downloads, Wget2 must be compiled with
an external SSL library.  The current default is GnuTLS. In addition,
Wget2 also supports HSTS (HTTP Strict Transport Security).  If Wget2 is
compiled without SSL support, none of these options are available.

* Menu:

* --secure-protocol=protocol::
* --https-only::
* --no-check-certificate::
* --certificate=file::
* --certificate-type=type::
* --private-key=file::
* --private-key-type=type::
* --ca-certificate=file::
* --ca-directory=directory::
* --crl-file=file::
* --random-file=file::
* --egd-file=file::
* --hsts::
* --hsts-file=file::
* --hsts-preload::
* --hsts-preload-file=file::
* --hpkp::
* --hpkp-file=file::
* --tls-resume::
* --tls-session-file=file::
* --tls-false-start::
* --check-hostname::
* --ocsp::
* --ocsp-date::
* --ocsp-nonce::
* --ocsp-server::
* --ocsp-stapling::
* --ocsp-file=file::
* --http2::
* --http2-only::
* --https-enforce=mode::


File: wget2.info,  Node: --secure-protocol=protocol,  Next: --https-only,  Up: HTTPS SSL/TLS Options

5.7.1 ‘--secure-protocol=protocol’
----------------------------------

Choose the secure protocol to be used (default: ‘auto’).

Legal values are ‘auto’, ‘SSLv3’, ‘TLSv1’, ‘TLSv1_1’, ‘TLSv1_2’,
‘TLSv1_3’ and ‘PFS’.

If ‘auto’ is used, the TLS library’s default is used.

Specifying ‘SSLv3’ forces the use of the SSL3.  This is useful when
talking to old and buggy SSL server implementations that make it hard
for the underlying TLS library to choose the correct protocol version.

Specifying ‘PFS’ enforces the use of the so-called Perfect Forward
Security cipher suites.  In short, PFS adds security by creating a
one-time key for each TLS connection.  It has a bit more CPU impact on
client and server.  We use known to be secure ciphers (e.g. no MD4) and
the TLS protocol.

‘TLSv1’ enables TLS1.0 or higher.  ‘TLSv1_1’ enables TLS1.1 or higher.
‘TLSv1_2’ enables TLS1.2 or higher.  ‘TLSv1_3’ enables TLS1.3 or higher.

Any other protocol string is directly given to the TLS library,
currently GnuTLS, as a “priority” or “cipher” string.  This is for users
who know what they are doing.


File: wget2.info,  Node: --https-only,  Next: --no-check-certificate,  Prev: --secure-protocol=protocol,  Up: HTTPS SSL/TLS Options

5.7.2 ‘--https-only’
--------------------

When in recursive mode, only HTTPS links are followed.


File: wget2.info,  Node: --no-check-certificate,  Next: --certificate=file,  Prev: --https-only,  Up: HTTPS SSL/TLS Options

5.7.3 ‘--no-check-certificate’
------------------------------

Don’t check the server certificate against the available certificate
authorities.  Also don’t require the URL host name to match the common
name presented by the certificate.

The default is to verify the server’s certificate against the recognized
certificate authorities, breaking the SSL handshake and aborting the
download if the verification fails.  Although this provides more secure
downloads, it does break interoperability with some sites that worked
with previous Wget versions, particularly those using self-signed,
expired, or otherwise invalid certificates.  This option forces an
“insecure” mode of operation that turns the certificate verification
errors into warnings and allows you to proceed.

If you encounter “certificate verification” errors or ones saying that
“common name doesn’t match requested host name”, you can use this option
to bypass the verification and proceed with the download.  Only use this
option if you are otherwise convinced of the site’s authenticity, or if
you really don’t care about the validity of its certificate.  It is
almost always a bad idea not to check the certificates when transmitting
confidential or important data.  For self-signed/internal certificates,
you should download the certificate and verify against that instead of
forcing this insecure mode.  If you are really sure of not desiring any
certificate verification, you can specify –check-certificate=quiet to
tell Wget2 to not print any warning about invalid certificates, albeit
in most cases this is the wrong thing to do.


File: wget2.info,  Node: --certificate=file,  Next: --certificate-type=type,  Prev: --no-check-certificate,  Up: HTTPS SSL/TLS Options

5.7.4 ‘--certificate=file’
--------------------------

Use the client certificate stored in file.  This is needed for servers
that are configured to require certificates from the clients that
connect to them.  Normally a certificate is not required and this switch
is optional.


File: wget2.info,  Node: --certificate-type=type,  Next: --private-key=file,  Prev: --certificate=file,  Up: HTTPS SSL/TLS Options

5.7.5 ‘--certificate-type=type’
-------------------------------

Specify the type of the client certificate.  Legal values are PEM
(assumed by default) and DER, also known as ASN1.


File: wget2.info,  Node: --private-key=file,  Next: --private-key-type=type,  Prev: --certificate-type=type,  Up: HTTPS SSL/TLS Options

5.7.6 ‘--private-key=file’
--------------------------

Read the private key from file.  This allows you to provide the private
key in a file separate from the certificate.


File: wget2.info,  Node: --private-key-type=type,  Next: --ca-certificate=file,  Prev: --private-key=file,  Up: HTTPS SSL/TLS Options

5.7.7 ‘--private-key-type=type’
-------------------------------

Specify the type of the private key.  Accepted values are PEM (the
default) and DER.


File: wget2.info,  Node: --ca-certificate=file,  Next: --ca-directory=directory,  Prev: --private-key-type=type,  Up: HTTPS SSL/TLS Options

5.7.8 ‘--ca-certificate=file’
-----------------------------

Use file as the file with the bundle of certificate authorities (“CA”)
to verify the peers.  The certificates must be in PEM format.

Without this option Wget2 looks for CA certificates at the
system-specified locations, chosen at OpenSSL installation time.


File: wget2.info,  Node: --ca-directory=directory,  Next: --crl-file=file,  Prev: --ca-certificate=file,  Up: HTTPS SSL/TLS Options

5.7.9 ‘--ca-directory=directory’
--------------------------------

Specifies directory containing CA certificates in PEM format.  Each file
contains one CA certificate, and the file name is based on a hash value
derived from the certificate.  This is achieved by processing a
certificate directory with the “c_rehash” utility supplied with OpenSSL.
Using ‘--ca-directory’ is more efficient than ‘--ca-certificate’ when
many certificates are installed because it allows Wget2 to fetch
certificates on demand.

Without this option Wget2 looks for CA certificates at the
system-specified locations, chosen at OpenSSL installation time.


File: wget2.info,  Node: --crl-file=file,  Next: --random-file=file,  Prev: --ca-directory=directory,  Up: HTTPS SSL/TLS Options

5.7.10 ‘--crl-file=file’
------------------------

Specifies a CRL file in file.  This is needed for certificates that have
been revocated by the CAs.


File: wget2.info,  Node: --random-file=file,  Next: --egd-file=file,  Prev: --crl-file=file,  Up: HTTPS SSL/TLS Options

5.7.11 ‘--random-file=file’
---------------------------

[OpenSSL and LibreSSL only] Use file as the source of random data for
seeding the pseudo-random number generator on systems without
/dev/urandom.

On such systems the SSL library needs an external source of randomness
to initialize.  Randomness may be provided by EGD (see –egd-file below)
or read from an external source specified by the user.  If this option
is not specified, Wget2 looks for random data in $RANDFILE or, if that
is unset, in $HOME/.rnd.

If you’re getting the “Could not seed OpenSSL PRNG; disabling SSL.”
error, you should provide random data using some of the methods
described above.


File: wget2.info,  Node: --egd-file=file,  Next: --hsts,  Prev: --random-file=file,  Up: HTTPS SSL/TLS Options

5.7.12 ‘--egd-file=file’
------------------------

[OpenSSL only] Use file as the EGD socket.  EGD stands for Entropy
Gathering Daemon, a user-space program that collects data from various
unpredictable system sources and makes it available to other programs
that might need it.  Encryption software, such as the SSL library, needs
sources of non-repeating randomness to seed the random number generator
used to produce cryptographically strong keys.

OpenSSL allows the user to specify his own source of entropy using the
“RAND_FILE” environment variable.  If this variable is unset, or if the
specified file does not produce enough randomness, OpenSSL will read
random data from EGD socket specified using this option.

If this option is not specified (and the equivalent startup command is
not used), EGD is never contacted.  EGD is not needed on modern Unix
systems that support /dev/urandom.


File: wget2.info,  Node: --hsts,  Next: --hsts-file=file,  Prev: --egd-file=file,  Up: HTTPS SSL/TLS Options

5.7.13 ‘--hsts’
---------------

Wget2 supports HSTS (HTTP Strict Transport Security, RFC 6797) by
default.  Use ‘--no-hsts’ to make Wget2 act as a non-HSTS-compliant UA.
As a consequence, Wget2 would ignore all the “Strict-Transport-Security”
headers, and would not enforce any existing HSTS policy.


File: wget2.info,  Node: --hsts-file=file,  Next: --hsts-preload,  Prev: --hsts,  Up: HTTPS SSL/TLS Options

5.7.14 ‘--hsts-file=file’
-------------------------

By default, Wget2 stores its HSTS database in ~/.wget-hsts.  You can use
–hsts-file to override this.  Wget2 will use the supplied file as the
HSTS database.  Such file must conform to the correct HSTS database
format used by Wget.  If Wget2 cannot parse the provided file, the
behaviour is unspecified.

The Wget2’s HSTS database is a plain text file.  Each line contains an
HSTS entry (ie.  a site that has issued a “Strict-Transport-Security”
header and that therefore has specified a concrete HSTS policy to be
applied).  Lines starting with a dash (“#”) are ignored by Wget.  Please
note that in spite of this convenient human-readability hand-hacking the
HSTS database is generally not a good idea.

An HSTS entry line consists of several fields separated by one or more
whitespace:

  <hostname> SP [<port>] SP <include subdomains> SP <created> SP <max-age>

The hostname and port fields indicate the hostname and port to which the
given HSTS policy applies.  The port field may be zero, and it will, in
most of the cases.  That means that the port number will not be taken
into account when deciding whether such HSTS policy should be applied on
a given request (only the hostname will be evaluated).  When port is
different to zero, both the target hostname and the port will be
evaluated and the HSTS policy will only be applied if both of them
match.  This feature has been included for testing/development purposes
only.  The Wget2 testsuite (in testenv/) creates HSTS databases with
explicit ports with the purpose of ensuring Wget2’s correct behaviour.
Applying HSTS policies to ports other than the default ones is
discouraged by RFC 6797 (see Appendix B “Differences between HSTS Policy
and Same-Origin Policy”).  Thus, this functionality should not be used
in production environments and port will typically be zero.  The last
three fields do what they are expected to.  The field include_subdomains
can either be 1 or 0 and it signals whether the subdomains of the target
domain should be part of the given HSTS policy as well.  The created and
max-age fields hold the timestamp values of when such entry was created
(first seen by Wget) and the HSTS-defined value ‘max-age’, which states
how long should that HSTS policy remain active, measured in seconds
elapsed since the timestamp stored in created.  Once that time has
passed, that HSTS policy will no longer be valid and will eventually be
removed from the database.

If you supply your own HSTS database via –hsts-file, be aware that Wget2
may modify the provided file if any change occurs between the HSTS
policies requested by the remote servers and those in the file.  When
Wget2 exits, it effectively updates the HSTS database by rewriting the
database file with the new entries.

If the supplied file does not exist, Wget2 will create one.  This file
will contain the new HSTS entries.  If no HSTS entries were generated
(no “Strict-Transport-Security” headers were sent by any of the servers)
then no file will be created, not even an empty one.  This behaviour
applies to the default database file (~/.wget-hsts) as well: it will not
be created until some server enforces an HSTS policy.

Care is taken not to override possible changes made by other Wget2
processes at the same time over the HSTS database.  Before dumping the
updated HSTS entries on the file, Wget2 will re-read it and merge the
changes.

Using a custom HSTS database and/or modifying an existing one is
discouraged.  For more information about the potential security threats
arose from such practice, see section 14 “Security Considerations” of
RFC 6797, specially section 14.9 “Creative Manipulation of HSTS Policy
Store”.


File: wget2.info,  Node: --hsts-preload,  Next: --hsts-preload-file=file,  Prev: --hsts-file=file,  Up: HTTPS SSL/TLS Options

5.7.15 ‘--hsts-preload’
-----------------------

Enable loading of a HSTS Preload List as supported by libhsts.
(default: on, if built with libhsts).


File: wget2.info,  Node: --hsts-preload-file=file,  Next: --hpkp,  Prev: --hsts-preload,  Up: HTTPS SSL/TLS Options

5.7.16 ‘--hsts-preload-file=file’
---------------------------------

If built with libhsts, Wget2 uses the HSTS data provided by the
distribution.  If there is no such support by the distribution or if you
want to load your own file, use this option.

The data file must be in DAFSA format as generated by libhsts’ tool
‘hsts-make-dafsa’.


File: wget2.info,  Node: --hpkp,  Next: --hpkp-file=file,  Prev: --hsts-preload-file=file,  Up: HTTPS SSL/TLS Options

5.7.17 ‘--hpkp’
---------------

Enable HTTP Public Key Pinning (HPKP) (default: on).

This is a Trust On First Use (TOFU) mechanism to add another security
layer to HTTPS (RFC 7469).  It persistently stores the data into
‘~/.wget-hpkp’ which can be changed via the ‘--hpkp-file’option.


File: wget2.info,  Node: --hpkp-file=file,  Next: --tls-resume,  Prev: --hpkp,  Up: HTTPS SSL/TLS Options

5.7.18 ‘--hpkp-file=file’
-------------------------

For HPKP (‘--hpkp’) you need the certificate key data of a previously
established TLS session.  Wget2 persistently stores this data in the
given file (default: ~/.wget-hpkp).

To disable persistent storage use ‘--no-hpkp-file’.


File: wget2.info,  Node: --tls-resume,  Next: --tls-session-file=file,  Prev: --hpkp-file=file,  Up: HTTPS SSL/TLS Options

5.7.19 ‘--tls-resume’
---------------------

Enable TLS Session Resumption which is disabled as default.

There are several security flaws related to TLS 1.2 session resumption
which are explained in detail at:
https://web.archive.org/web/20171103231804/https://blog.filippo.io/we-need-to-talk-about-session-tickets/


File: wget2.info,  Node: --tls-session-file=file,  Next: --tls-false-start,  Prev: --tls-resume,  Up: HTTPS SSL/TLS Options

5.7.20 ‘--tls-session-file=file’
--------------------------------

For TLS Session Resumption (‘--tls-resume’) you need the session data of
a previously established TLS session.  Wget2 persistently stores this
data in the given file (default: ~/.wget-session).

To disable persistent storage use ‘--no-tls-session-file’.


File: wget2.info,  Node: --tls-false-start,  Next: --check-hostname,  Prev: --tls-session-file=file,  Up: HTTPS SSL/TLS Options

5.7.21 ‘--tls-false-start’
--------------------------

Enable TLS False start (default: on).

This reduces TLS negotiation by one RT and thus speeds up HTTPS
connections.

More details at https://tools.ietf.org/html/rfc7918.


File: wget2.info,  Node: --check-hostname,  Next: --ocsp,  Prev: --tls-false-start,  Up: HTTPS SSL/TLS Options

5.7.22 ‘--check-hostname’
-------------------------

Enable TLS SNI verification (default: on).


File: wget2.info,  Node: --ocsp,  Next: --ocsp-date,  Prev: --check-hostname,  Up: HTTPS SSL/TLS Options

5.7.23 ‘--ocsp’
---------------

Enable OCSP server access to check the possible revocation the HTTPS
server certificate(s) (default: on).

This procedure is pretty slow (connect to server, HTTP request,
response) and thus we support OSCP stapling (server sends OCSP response
within TLS handshake) and persistent OCSP caching.


File: wget2.info,  Node: --ocsp-date,  Next: --ocsp-nonce,  Prev: --ocsp,  Up: HTTPS SSL/TLS Options

5.7.24 ‘--ocsp-date’
--------------------

Check if OCSP response is too old.  (default: on)


File: wget2.info,  Node: --ocsp-nonce,  Next: --ocsp-server,  Prev: --ocsp-date,  Up: HTTPS SSL/TLS Options

5.7.25 ‘--ocsp-nonce’
---------------------

Allow nonce checking when verifying OCSP response.  (default: on)


File: wget2.info,  Node: --ocsp-server,  Next: --ocsp-stapling,  Prev: --ocsp-nonce,  Up: HTTPS SSL/TLS Options

5.7.26 ‘--ocsp-server’
----------------------

Set OCSP server address (default: OCSP server given in certificate).


File: wget2.info,  Node: --ocsp-stapling,  Next: --ocsp-file=file,  Prev: --ocsp-server,  Up: HTTPS SSL/TLS Options

5.7.27 ‘--ocsp-stapling’
------------------------

Enable support for OCSP stapling (default: on).


File: wget2.info,  Node: --ocsp-file=file,  Next: --http2,  Prev: --ocsp-stapling,  Up: HTTPS SSL/TLS Options

5.7.28 ‘--ocsp-file=file’
-------------------------

Set the file for persistent OCSP response caching (default:
~/.wget-ocsp).

To disable persistent OCSP caching use ‘--no-ocsp-file’.


File: wget2.info,  Node: --http2,  Next: --http2-only,  Prev: --ocsp-file=file,  Up: HTTPS SSL/TLS Options

5.7.29 ‘--http2’
----------------

Enable HTTP/2 protocol (default: on).

Wget2 requests HTTP/2 via ALPN. If available it is preferred over
HTTP/1.1.  Up to 30 streams are used in parallel within a single
connection.


File: wget2.info,  Node: --http2-only,  Next: --https-enforce=mode,  Prev: --http2,  Up: HTTPS SSL/TLS Options

5.7.30 ‘--http2-only’
---------------------

Resist on using HTTP/2 and error if a server doesn’t accept it.  This is
mainly for testing.


File: wget2.info,  Node: --https-enforce=mode,  Prev: --http2-only,  Up: HTTPS SSL/TLS Options

5.7.31 ‘--https-enforce=mode’
-----------------------------

Sets how to deal with URLs that are not explicitly HTTPS (where scheme
isn’t https://) (default: none)

* Menu:

* mode=none::
* mode=soft::
* mode=hard::


File: wget2.info,  Node: mode=none,  Next: mode=soft,  Up: --https-enforce=mode

5.7.31.1 mode=none
..................

Use HTTP for URLs without scheme.  In recursive operation the scheme of
the parent document is taken as default.


File: wget2.info,  Node: mode=soft,  Next: mode=hard,  Prev: mode=none,  Up: --https-enforce=mode

5.7.31.2 mode=soft
..................

Try HTTPS first when the scheme is HTTP or not given.  On failure fall
back to HTTP.


File: wget2.info,  Node: mode=hard,  Prev: mode=soft,  Up: --https-enforce=mode

5.7.31.3 mode=hard
..................

Only use HTTPS, no matter if a HTTP scheme is given or not.  Do not fall
back to HTTP.


File: wget2.info,  Node: Recursive Retrieval Options,  Next: Recursive Accept/Reject Options,  Prev: HTTPS SSL/TLS Options,  Up: Options

5.8 Recursive Retrieval Options
===============================

* Menu:

* -r --recursive::
* -l depth --level=depth::
* --delete-after::
* -k --convert-links::
* --convert-file-only::
* -K --backup-converted::
* -m --mirror::
* -p --page-requisites::
* --strict-comments::
* --robots::


File: wget2.info,  Node: -r --recursive,  Next: -l depth --level=depth,  Up: Recursive Retrieval Options

5.8.1 ‘-r’, ‘--recursive’
-------------------------

Turn on recursive retrieving.  The default maximum depth is 5.


File: wget2.info,  Node: -l depth --level=depth,  Next: --delete-after,  Prev: -r --recursive,  Up: Recursive Retrieval Options

5.8.2 ‘-l depth’, ‘--level=depth’
---------------------------------

Specify recursion maximum depth level depth.


File: wget2.info,  Node: --delete-after,  Next: -k --convert-links,  Prev: -l depth --level=depth,  Up: Recursive Retrieval Options

5.8.3 ‘--delete-after’
----------------------

This option tells Wget2 to delete every single file it downloads, after
having done so.  It is useful for pre- fetching popular pages through a
proxy, e.g.:

  wget2 -r -nd --delete-after https://example.com/~popular/page/

The -r option is to retrieve recursively, and -nd to not create
directories.

Note that when –delete-after is specified, –convert-links is ignored, so
.orig files are simply not created in the first place.


File: wget2.info,  Node: -k --convert-links,  Next: --convert-file-only,  Prev: --delete-after,  Up: Recursive Retrieval Options

5.8.4 ‘-k’, ‘--convert-links’
-----------------------------

After the download is complete, convert the links in the document to
make them suitable for local viewing.  This affects not only the visible
hyperlinks, but any part of the document that links to external content,
such as embedded images, links to style sheets, hyperlinks to non-HTML
content, etc.

Each link will be changed in one of the two ways:

  1. The links to files that have been downloaded by Wget2 will be
     changed to refer to the file they point to as a relative link.

     Example: if the downloaded file /foo/doc.html links to
     /bar/img.gif, also downloaded, then the link in doc.html will be
     modified to point to ../bar/img.gif.  This kind of transformation
     works reliably for arbitrary combinations of directories.

  2. The links to files that have not been downloaded by Wget2 will be
     changed to include host name and absolute path of the location they
     point to.

     Example: if the downloaded file /foo/doc.html links to /bar/img.gif
     (or to ../bar/img.gif), then the link in doc.html will be modified
     to point to ‘https://example.com/bar/img.gif’.

Because of this, local browsing works reliably: if a linked file was
downloaded, the link will refer to its local name; if it was not
downloaded, the link will refer to its full Internet address rather than
presenting a broken link.  The fact that the former links are converted
to relative links ensures that you can move the downloaded hierarchy to
another directory.

Note that only at the end of the download can Wget2 know which links
have been downloaded.  Because of that, the work done by ‘-k’ will be
performed at the end of all the downloads.


File: wget2.info,  Node: --convert-file-only,  Next: -K --backup-converted,  Prev: -k --convert-links,  Up: Recursive Retrieval Options

5.8.5 ‘--convert-file-only’
---------------------------

This option converts only the filename part of the URLs, leaving the
rest of the URLs untouched.  This filename part is sometimes referred to
as the “basename”, although we avoid that term here in order not to
cause confusion.

It works particularly well in conjunction with ‘--adjust-extension’,
although this coupling is not enforced.  It proves useful to populate
Internet caches with files downloaded from different hosts.

Example: if some link points to //foo.com/bar.cgi?xyz with
–adjust-extension asserted and its local destination is intended to be
./foo.com/bar.cgi?xyz.css, then the link would be converted to
//foo.com/bar.cgi?xyz.css.  Note that only the filename part has been
modified.  The rest of the URL has been left untouched, including the
net path (“//”) which would otherwise be processed by Wget2 and
converted to the effective scheme (ie.  “https://”).


File: wget2.info,  Node: -K --backup-converted,  Next: -m --mirror,  Prev: --convert-file-only,  Up: Recursive Retrieval Options

5.8.6 ‘-K’, ‘--backup-converted’
--------------------------------

When converting a file, back up the original version with a .orig
suffix.  Affects the behavior of ‘-N’.


File: wget2.info,  Node: -m --mirror,  Next: -p --page-requisites,  Prev: -K --backup-converted,  Up: Recursive Retrieval Options

5.8.7 ‘-m’, ‘--mirror’
----------------------

Turn on options suitable for mirroring.  This option turns on recursion
and time-stamping, sets infinite recursion depth.  It is currently
equivalent to ‘-r -N -l inf’.


File: wget2.info,  Node: -p --page-requisites,  Next: --strict-comments,  Prev: -m --mirror,  Up: Recursive Retrieval Options

5.8.8 ‘-p’, ‘--page-requisites’
-------------------------------

This option causes Wget2 to download all the files that are necessary to
properly display a given HTML page.  This includes such things as
inlined images, sounds, and referenced stylesheets.

Ordinarily, when downloading a single HTML page, any requisite documents
that may be needed to display it properly are not downloaded.  Using
‘-r’ together with ‘-l’ can help, but since Wget2 does not ordinarily
distinguish between external and inlined documents, one is generally
left with “leaf documents” that are missing their requisites.

For instance, say document ‘1.html’ contains an ‘<IMG>’ tag referencing
‘1.gif’ and an ‘<A>’ tag pointing to external document ‘2.html’.  Say
that ‘2.html’ is similar but that its image is ‘2.gif’ and it links to
‘3.html’.  Say this continues up to some arbitrarily high number.

If one executes the command:

  wget2 -r -l 2 https://<site>/1.html

then 1.html, 1.gif, 2.html, 2.gif, and 3.html will be downloaded.  As
you can see, 3.html is without its requisite 3.gif because Wget2 is
simply counting the number of hops (up to 2) away from 1.html in order
to determine where to stop the recursion.  However, with this command:

  wget2 -r -l 2 -p https://<site>/1.html

all the above files and 3.html’s requisite 3.gif will be downloaded.
Similarly,

  wget2 -r -l 1 -p https://<site>/1.html

will cause 1.html, 1.gif, 2.html, and 2.gif to be downloaded.  One might
think that:

  wget2 -r -l 0 -p https://<site>/1.html

would download just 1.html and 1.gif, but unfortunately this is not the
case, because -l 0 is equivalent to -l inf, that is, infinite recursion.
To download a single HTML page (or a handful of them, all specified on
the command-line or in a -i URL input file) and its (or their)
requisites, simply leave off -r and -l:

  wget2 -p https://<site>/1.html

Note that Wget2 will behave as if -r had been specified, but only that
single page and its requisites will be downloaded.  Links from that page
to external documents will not be followed.  Actually, to download a
single page and all its requisites (even if they exist on separate
websites), and make sure the lot displays properly locally, this author
likes to use a few options in addition to -p:

  wget2 -E -H -k -K -p https://<site>/<document>

To finish off this topic, it’s worth knowing that Wget2’s idea of an
external document link is any URL specified in an ‘<A>’ tag, an ‘<AREA>’
tag, or a ‘<LINK>’ tag other than ‘<LINK REL="stylesheet">’.


File: wget2.info,  Node: --strict-comments,  Next: --robots,  Prev: -p --page-requisites,  Up: Recursive Retrieval Options

5.8.9 ‘--strict-comments’
-------------------------

Obsolete option for compatibility with Wget1.x.  Wget2 always terminates
comments at the first occurrence of ‘-->’, as popular browsers do.


File: wget2.info,  Node: --robots,  Prev: --strict-comments,  Up: Recursive Retrieval Options

5.8.10 ‘--robots’
-----------------

Enable the Robots Exclusion Standard (default: on).

For each visited domain, follow rules specified in ‘/robots.txt’.  You
should respect the domain owner’s rules and turn this off only for very
good reasons.

Whether enabled or disabled, the ‘robots.txt’ file is downloaded and
scanned for sitemaps.  These are lists of pages / files available for
download that not necessarily are available via recursive scanning.


File: wget2.info,  Node: Recursive Accept/Reject Options,  Next: Plugin Options,  Prev: Recursive Retrieval Options,  Up: Options

5.9 Recursive Accept/Reject Options
===================================

* Menu:

* -A acclist --accept=acclist -R rejlist --reject=rejlist::
* --accept-regex=urlregex --reject-regex=urlregex::
* --regex-type=regextype::
* --filter-urls::
* -D domain-list --domains=domain-list::
* --exclude-domains=domain-list::
* --follow-tags=list::
* --ignore-tags=list::
* --ignore-case::
* -H --span-hosts::
* -L --relative [Not implemented yet]::
* -I list --include-directories=list::
* -X list --exclude-directories=list::
* -np --no-parent::
* --filter-mime-type=list::


File: wget2.info,  Node: -A acclist --accept=acclist -R rejlist --reject=rejlist,  Next: --accept-regex=urlregex --reject-regex=urlregex,  Up: Recursive Accept/Reject Options

5.9.1 ‘-A acclist’, ‘--accept=acclist’,
---------------------------------------

‘-R rejlist’, ‘--reject=rejlist’ Specify comma-separated lists of file
name suffixes or patterns to accept or reject.  Note that if any of the
wildcard characters, ‘*, ?, [, ]’, appear in an element of acclist or
rejlist, it will be treated as a pattern, rather than a suffix.  In this
case, you have to enclose the pattern into quotes to prevent your shell
from expanding it, like in ‘-A "*.mp3"’ or ‘-A '*.mp3'’.


File: wget2.info,  Node: --accept-regex=urlregex --reject-regex=urlregex,  Next: --regex-type=regextype,  Prev: -A acclist --accept=acclist -R rejlist --reject=rejlist,  Up: Recursive Accept/Reject Options

5.9.2 ‘--accept-regex=urlregex’,
--------------------------------

‘--reject-regex=urlregex’ Specify a regular expression to accept or
reject file names.


File: wget2.info,  Node: --regex-type=regextype,  Next: --filter-urls,  Prev: --accept-regex=urlregex --reject-regex=urlregex,  Up: Recursive Accept/Reject Options

5.9.3 ‘--regex-type=regextype’
------------------------------

Specify the regular expression type.  Possible types are posix or pcre.
Note that to be able to use pcre type, wget2 has to be compiled with
libpcre support.


File: wget2.info,  Node: --filter-urls,  Next: -D domain-list --domains=domain-list,  Prev: --regex-type=regextype,  Up: Recursive Accept/Reject Options

5.9.4 ‘--filter-urls’
---------------------

Apply the accept and reject filters on the URL before starting a
download.


File: wget2.info,  Node: -D domain-list --domains=domain-list,  Next: --exclude-domains=domain-list,  Prev: --filter-urls,  Up: Recursive Accept/Reject Options

5.9.5 ‘-D domain-list’, ‘--domains=domain-list’
-----------------------------------------------

Set domains to be followed.  domain-list is a comma-separated list of
domains.  Note that it does not turn on -H.


File: wget2.info,  Node: --exclude-domains=domain-list,  Next: --follow-tags=list,  Prev: -D domain-list --domains=domain-list,  Up: Recursive Accept/Reject Options

5.9.6 ‘--exclude-domains=domain-list’
-------------------------------------

Specify the domains that are not to be followed.


File: wget2.info,  Node: --follow-tags=list,  Next: --ignore-tags=list,  Prev: --exclude-domains=domain-list,  Up: Recursive Accept/Reject Options

5.9.7 ‘--follow-tags=list’
--------------------------

Wget2 has an internal table of HTML tag / attribute pairs that it
considers when looking for linked documents during a recursive
retrieval.  If a user wants only a subset of those tags to be
considered, however, he or she should be specify such tags in a
comma-separated list with this option.


File: wget2.info,  Node: --ignore-tags=list,  Next: --ignore-case,  Prev: --follow-tags=list,  Up: Recursive Accept/Reject Options

5.9.8 ‘--ignore-tags=list’
--------------------------

This is the opposite of the –follow-tags option.  To skip certain HTML
tags when recursively looking for documents to download, specify them in
a comma-separated list.

In the past, this option was the best bet for downloading a single page
and its requisites, using a command-line like:

  wget2 --ignore-tags=a,area -H -k -K -r https://<site>/<document>

However, the author of this option came across a page with tags like “”
and came to the realization that specifying tags to ignore was not
enough.  One can’t just tell Wget2 to ignore “”, because then
stylesheets will not be downloaded.  Now the best bet for downloading a
single page and its requisites is the dedicated –page-requisites option.


File: wget2.info,  Node: --ignore-case,  Next: -H --span-hosts,  Prev: --ignore-tags=list,  Up: Recursive Accept/Reject Options

5.9.9 ‘--ignore-case’
---------------------

Ignore case when matching files and directories.  This influences the
behavior of -R, -A, -I, and -X options.  For example, with this option,
-A "*.txt" will match file1.txt, but also file2.TXT, file3.TxT, and so
on.  The quotes in the example are to prevent the shell from expanding
the pattern.


File: wget2.info,  Node: -H --span-hosts,  Next: -L --relative [Not implemented yet],  Prev: --ignore-case,  Up: Recursive Accept/Reject Options

5.9.10 ‘-H’, ‘--span-hosts’
---------------------------

Enable spanning across hosts when doing recursive retrieving.


File: wget2.info,  Node: -L --relative [Not implemented yet],  Next: -I list --include-directories=list,  Prev: -H --span-hosts,  Up: Recursive Accept/Reject Options

5.9.11 ‘-L’, ‘--relative’ [Not implemented yet]
-----------------------------------------------

Follow relative links only.  Useful for retrieving a specific home page
without any distractions, not even those from the same hosts.


File: wget2.info,  Node: -I list --include-directories=list,  Next: -X list --exclude-directories=list,  Prev: -L --relative [Not implemented yet],  Up: Recursive Accept/Reject Options

5.9.12 ‘-I list’, ‘--include-directories=list’
----------------------------------------------

Specify a comma-separated list of directories you wish to follow when
downloading.  Elements of the list may contain wildcards.

  wget2 -r https://webpage.domain --include-directories=*/pub/*/

Please keep in mind that ‘*/pub/*/’ is the same as ‘/*/pub/*/’ and that
it matches directories, not strings.  This means that ‘*/pub’ doesn’t
affect files contained at e.g. ‘/directory/something/pub’ but ‘/pub/*’
matches every subdir of ‘/pub’.


File: wget2.info,  Node: -X list --exclude-directories=list,  Next: -np --no-parent,  Prev: -I list --include-directories=list,  Up: Recursive Accept/Reject Options

5.9.13 ‘-X list’, ‘--exclude-directories=list’
----------------------------------------------

Specify a comma-separated list of directories you wish to exclude from
download.  Elements of the list may contain wildcards.

  wget2 -r https://gnu.org --exclude-directories=/software

* Menu:

* -I / -X combinations::


File: wget2.info,  Node: -I / -X combinations,  Up: -X list --exclude-directories=list

5.9.13.1 ‘-I’ / ‘-X’ combinations
.................................

Please be aware that the behavior of this combination of flags works
slightly different than in wget1.x.

If -I is given first, the default is ‘exclude all’.  If -X is given
first, the default is ‘include all’.

Multiple -I/-X options are processed ‘first to last’.  The last match is
relevant.

  Example: -I /pub -X /pub/trash would download all from /pub/ except from /pub/trash.
  Example: -X /pub -I /pub/important would download all except from /pub where only /pub/important would be downloaded.

To reset the list (e.g. to ignore -I/-X from .wgetrc files) use
‘--no-include-directories’ or ‘--no-exclude-directories’.


File: wget2.info,  Node: -np --no-parent,  Next: --filter-mime-type=list,  Prev: -X list --exclude-directories=list,  Up: Recursive Accept/Reject Options

5.9.14 ‘-np’, ‘--no-parent’
---------------------------

Do not ever ascend to the parent directory when retrieving recursively.
This is a useful option, since it guarantees that only the files below a
certain hierarchy will be downloaded.


File: wget2.info,  Node: --filter-mime-type=list,  Prev: -np --no-parent,  Up: Recursive Accept/Reject Options

5.9.15 ‘--filter-mime-type=list’
--------------------------------

Specify a comma-separated list of MIME types that will be downloaded.
Elements of list may contain wildcards.  If a MIME type starts with the
character ‘!’ it won’t be downloaded, this is useful when trying to
download something with exceptions.  If server doesn’t specify the MIME
type of a file it will be considered as ‘application/octet-stream’.  For
example, download everything except images:

  wget2 -r https://<site>/<document> --filter-mime-type=*,\!image/*

It is also useful to download files that are compatible with an
application of your system.  For instance, download every file that is
compatible with LibreOffice Writer from a website using the recursive
mode:

  wget2 -r https://<site>/<document> --filter-mime-type=$(sed -r '/^MimeType=/!d;s/^MimeType=//;s/;/,/g' /usr/share/applications/libreoffice-writer.desktop)


File: wget2.info,  Node: Plugin Options,  Prev: Recursive Accept/Reject Options,  Up: Options

5.10 Plugin Options
===================

* Menu:

* --list-plugins::
* --local-plugin=file::
* --plugin=name::
* --plugin-dirs=directories::
* --plugin-help::
* --plugin-opt=option::


File: wget2.info,  Node: --list-plugins,  Next: --local-plugin=file,  Up: Plugin Options

5.10.1 ‘--list-plugins’
-----------------------

Print a list all available plugins and exit.


File: wget2.info,  Node: --local-plugin=file,  Next: --plugin=name,  Prev: --list-plugins,  Up: Plugin Options

5.10.2 ‘--local-plugin=file’
----------------------------

Load ‘file’ as plugin.


File: wget2.info,  Node: --plugin=name,  Next: --plugin-dirs=directories,  Prev: --local-plugin=file,  Up: Plugin Options

5.10.3 ‘--plugin=name’
----------------------

Load a plugin with a given ‘name’ from the configured plugin
directories.


File: wget2.info,  Node: --plugin-dirs=directories,  Next: --plugin-help,  Prev: --plugin=name,  Up: Plugin Options

5.10.4 ‘--plugin-dirs=directories’
----------------------------------

Set plugin directories.  ‘directories’ is a comma-separated list of
directories.


File: wget2.info,  Node: --plugin-help,  Next: --plugin-opt=option,  Prev: --plugin-dirs=directories,  Up: Plugin Options

5.10.5 ‘--plugin-help’
----------------------

Print the help messages from all loaded plugins.


File: wget2.info,  Node: --plugin-opt=option,  Prev: --plugin-help,  Up: Plugin Options

5.10.6 ‘--plugin-opt=option’
----------------------------

Set a plugin specific command line option.

‘option’ is in the format ‘<plugin_name>.<option>[=value]’.


File: wget2.info,  Node: Environment,  Next: Exit Status,  Prev: Options,  Up: Top

6 Environment
*************

Wget2 supports proxies for both HTTP and HTTPS retrievals.  The standard
way to specify proxy location, which Wget recognizes, is using the
following environment variables:

‘http_proxy’

‘https_proxy’

If set, the ‘http_proxy’ and ‘https_proxy’ variables should contain the
URLs of the proxies for HTTP and HTTPS connections respectively.

‘no_proxy’

This variable should contain a comma-separated list of domain extensions
‘proxy’ should not be used for.  For instance, if the value of
‘no_proxy’ is ‘.example.com’, ‘proxy’ will not be used to retrieve
documents from ‘*.example.com’.


File: wget2.info,  Node: Exit Status,  Next: Startup File,  Prev: Environment,  Up: Top

7 Exit Status
*************

Wget2 may return one of several error codes if it encounters problems.

  0   No problems occurred.

  1   Generic error code.

  2   Parse error. For instance, when parsing command-line options, the .wgetrc or .netrc...

  3   File I/O error.

  4   Network failure.

  5   SSL verification failure.

  6   Username/password authentication failure.

  7   Protocol errors.

  8   Server issued an error response.

  9   Public key missing from keyring.

  10  A Signature verification failed.

With the exceptions of 0 and 1, the lower-numbered exit codes take
precedence over higher-numbered ones, when multiple types of errors are
encountered.


File: wget2.info,  Node: Startup File,  Next: Bugs,  Prev: Exit Status,  Up: Top

8 Startup File
**************

Sometimes you may wish to permanently change the default behaviour of
GNU Wget2.  There is a better way to do this than setting an alias in
your shell.  GNU Wget2 allows you to set all options permanently through
its startup up, ‘.wget2rc’.

While ‘.wget2rc’ is the _main_ initialization file used by GNU Wget2, it
is not a good idea to store passwords in this file.  This is because the
startup file maybe publicly readable or backed up in version control.
This is why Wget2 also reads the contents of ‘$HOME/.netrc’ when
required.

The ‘.wget2rc’ file follows a very similar syntax to the ‘.wgetrc’ that
is read by GNU Wget.  It varies in only those places where the command
line options vary between Wget1.x and Wget2.

* Menu:

* Wget2rc Location::


File: wget2.info,  Node: Wget2rc Location,  Up: Startup File

8.1 Wget2rc Location
====================

When initializing, Wget2 will attempt to read the “global” startup file,
which is located at ‘/usr/local/etc/wget2rc’ by default (or some prefix
other than ‘/usr/local’, if Wget2 was not installed there).  The global
startup file is useful for system administrators to enforce a default
policy, such as setting the path to the certificate store, preloading a
HSTS list, etc.

Then, Wget2 will look for the user’s initialization file.  If the user
has passed the ‘--config’ command line option, Wget2 will try to load
the file that it points to.  If file does not exist, or if it cannot be
read, Wget2 will make no further attempts to read any initialization
files.

If the environment variable ‘WGET2RC’ is set, Wget2 will try to load the
file at this location.  If the file does not exist, or if it cannot be
read, Wget2 will make no further attempts to read an initialization
file.

If, ‘--config’ is not passed and ‘WGET2RC’ is not set, Wget2 will
attempt to load the user’s initialization file from a location as
defined by the XDG Base Directory Specification.  It will read the
first, and only the first file it finds from the following locations:

  1. ‘$XDG_CONFIG_HOME/wget/wget2rc’
  2. ‘$HOME/.config/wget/wget2rc’
  3. ‘$HOME/.wget2rc’

Having an initialization file at ‘$HOME/.wget2rc’ is deprecated.  If a
file is found there, Wget2 will print a warning about it.  Support for
reading from this file will be removed in the future.

The fact that the user’s settings are loaded after the system-wide ones
means that in case of a collision, the user’s wget2rc _overrides_ the
global wget2rc.


File: wget2.info,  Node: Bugs,  Next: See also,  Prev: Startup File,  Up: Top

9 Bugs
******

You are welcome to submit bug reports via the GNU Wget2 bug tracker
(https://gitlab.com/gnuwget/wget2/issues).

Before actually submitting a bug report, please try to follow a few
simple guidelines.

  1. Please try to ascertain that the behavior you see really is a bug.
     If Wget2 crashes, it’s a bug.  If Wget2 does not behave as
     documented, it’s a bug.  If things work strange, but you are not
     sure about the way they are supposed to work, it might well be a
     bug, but you might want to double-check the documentation and the
     mailing lists.

  2. Try to repeat the bug in as simple circumstances as possible.  E.g.
     if Wget2 crashes while downloading ‘wget2 -rl0 -kKE -t5 --no-proxy
     https://example.com -o /tmp/log’, you should try to see if the
     crash is repeatable, and if will occur with a simpler set of
     options.  You might even try to start the download at the page
     where the crash occurred to see if that page somehow triggered the
     crash.

Also, while I will probably be interested to know the contents of your
‘.wgetrc’ file, just dumping it into the debug message is probably a bad
idea.  Instead, you should first try to see if the bug repeats with
‘.wgetrc’ moved out of the way.  Only if it turns out that ‘.wgetrc’
settings affect the bug, mail me the relevant parts of the file.

  3. Please start Wget2 with -d option and send us the resulting output
     (or relevant parts thereof).  If Wget2 was compiled without debug
     support, recompile it.  It is much easier to trace bugs with debug
     support on.

Note: please make sure to remove any potentially sensitive information
from the debug log before sending it to the bug address.  The ‘-d’ won’t
go out of its way to collect sensitive information, but the log will
contain a fairly complete transcript of Wget2’s communication with the
server, which may include passwords and pieces of downloaded data.
Since the bug address is publicly archived, you may assume that all bug
reports are visible to the public.

  4. If Wget2 has crashed, try to run it in a debugger, e.g. ‘gdb `which
     wget` core’ and type “where” to get the backtrace.  This may not
     work if the system administrator has disabled core files, but it is
     safe to try.


File: wget2.info,  Node: See also,  Next: Author,  Prev: Bugs,  Up: Top

10 See also
***********

This is not the complete manual for GNU Wget.  For more complete
information, including more detailed explanations of some of the
options, and a number of commands available for use with .wgetrc files
and the -e option, see the GNU Info entry for wget.


File: wget2.info,  Node: Author,  Next: Copyright,  Prev: See also,  Up: Top

11 Author
*********

Wget2 written by Tim Rühsen tim.ruehsen@gmx.de
(mailto:tim.ruehsen@gmx.de)

Wget 1.x originally written by Hrvoje Nikšić hniksic@xemacs.org
(mailto:hniksic@xemacs.org)


File: wget2.info,  Node: Copyright,  Prev: Author,  Up: Top

12 Copyright
************

Copyright (C) 2012-2015 Tim Rühsen

Copyright (C) 2015-2021 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled “GNU
Free Documentation License”.



Tag Table:
Node: Top71
Node: Wget2 User Manual328
Ref: #wget2-user-manual450
Node: Name1528
Ref: #name1629
Node: Synopsis1684
Ref: #synopsis1787
Node: Description1822
Ref: #description1934
Node: Options3169
Ref: #options3276
Node: Option Syntax3538
Ref: #option-syntax3661
Node: Basic Startup Options5690
Ref: #basic-startup-options5868
Node: -V --version5970
Ref: #v---version6114
Node: -h --help6145
Ref: #h---help6307
Node: -b --background6379
Ref: #b---background6561
Node: -e --execute=command6696
Ref: #e---executecommand6890
Node: --hyperlink7148
Ref: #hyperlink7290
Node: Logging and Input File Options7518
Ref: #logging-and-input-file-options7717
Node: -o --output-file=logfile8264
Ref: #o---output-filelogfile8470
Node: -a --append-output=logfile8561
Ref: #a---append-outputlogfile8790
Node: -d --debug8978
Ref: #d---debug9161
Node: -q --quiet9563
Ref: #q---quiet9732
Node: -v --verbose9760
Ref: #v---verbose9939
Node: -nv --no-verbose10025
Ref: #nv---no-verbose10221
Node: --report-speed=type10368
Ref: #report-speedtype10568
Node: -i --input-file=file10746
Ref: #i---input-filefile10957
Node: -F --force-html12226
Ref: #f---force-html12419
Node: --force-css12649
Ref: #force-css12821
Node: --force-sitemap12998
Ref: #force-sitemap13175
Node: --force-atom13364
Ref: #force-atom13535
Node: --force-rss13726
Ref: #force-rss13896
Node: --force-metalink14086
Ref: #force-metalink14267
Node: -B --base=URL14455
Ref: #b---baseurl14642
Node: --config=FILE15246
Ref: #configfile15451
Node: --rejected-log=logfile [Not implemented yet]16339
Ref: #rejected-loglogfile-not-implemented-yet16603
Node: --local-db16755
Ref: #local-db16962
Node: --stats-dns=[FORMAT]FILE17246
Ref: #stats-dnsformatfile17463
Node: --stats-tls=[FORMAT]FILE17742
Ref: #stats-tlsformatfile17974
Node: --stats-ocsp=[FORMAT]FILE18771
Ref: #stats-ocspformatfile19008
Node: --stats-server=[FORMAT]FILE19539
Ref: #stats-serverformatfile19781
Node: --stats-site=[FORMAT]FILE20374
Ref: #stats-siteformatfile20578
Node: Download Options21711
Ref: #download-options21878
Node: --bind-address=ADDRESS23230
Ref: #bind-addressaddress23406
Node: --bind-interface=INTERFACE23608
Ref: #bind-interfaceinterface23818
Node: -t --tries=number24200
Ref: #t---triesnumber24406
Node: --retry-on-http-error=list24627
Ref: #retry-on-http-errorlist24840
Node: -O --output-document=file25448
Ref: #o---output-documentfile25668
Node: -nc --no-clobber27311
Ref: #nc---no-clobber27504
Node: --backups=backups29417
Ref: #backupsbackups29590
Node: -c --continue29782
Ref: #c---continue29959
Node: --start-pos=OFFSET32728
Ref: #start-posoffset32903
Node: --progress=type33381
Ref: #progresstype33555
Node: --force-progress36113
Ref: #force-progress36288
Node: -N --timestamping36886
Ref: #n---timestamping37080
Node: --no-if-modified-since37104
Ref: #no-if-modified-since37308
Node: --no-use-server-timestamps37432
Ref: #no-use-server-timestamps37647
Node: -S --server-response38073
Ref: #s---server-response38272
Node: --spider38322
Ref: #spider38489
Node: -T seconds --timeout=seconds38843
Ref: #t-seconds---timeoutseconds39061
Node: --dns-timeout=seconds39869
Ref: #dns-timeoutseconds40080
Node: --connect-timeout=seconds40298
Ref: #connect-timeoutseconds40511
Node: --read-timeout=seconds40711
Ref: #read-timeoutseconds40916
Node: --limit-rate=amount41389
Ref: #limit-rateamount41588
Node: -w seconds --wait=seconds42468
Ref: #w-seconds---waitseconds42686
Node: --waitretry=seconds43307
Ref: #waitretryseconds43497
Node: --random-wait43883
Ref: #random-wait44059
Node: --no-proxy[=exceptions]44872
Ref: #no-proxyexceptions45071
Node: -Q quota --quota=quota45408
Ref: #q-quota---quotaquota45629
Node: --restrict-file-names=modes46294
Ref: #restrict-file-namesmodes46523
Node: -4 --inet4-only -6 --inet6-only49124
Ref: #inet4-only--6---inet6-only49383
Node: --prefer-family=none/IPv4/IPv650365
Ref: #prefer-familynoneipv4ipv650595
Node: --tcp-fastopen51621
Ref: #tcp-fastopen51812
Node: --dns-cache-preload=file52070
Ref: #dns-cache-preloadfile52262
Node: --dns-cache52566
Ref: #dns-cache52737
Node: --retry-connrefused53512
Ref: #retry-connrefused53706
Node: --user=user --password=password54072
Ref: #useruser---passwordpassword54303
Node: --ask-password54707
Ref: #ask-password54896
Node: --use-askpass=command54993
Ref: #use-askpasscommand55173
Node: --no-iri55307
Ref: #no-iri55472
Node: --local-encoding=encoding55724
Ref: #local-encodingencoding55928
Node: --remote-encoding=encoding56228
Ref: #remote-encodingencoding56451
Node: --input-encoding=encoding56848
Ref: #input-encodingencoding57052
Node: --unlink57159
Ref: #unlink57321
Node: --cut-url-get-vars57458
Ref: #cut-url-get-vars57634
Node: --cut-file-get-vars57934
Ref: #cut-file-get-vars58121
Node: --chunk-size=size58678
Ref: #chunk-sizesize58863
Node: --max-threads=number59050
Ref: #max-threadsnumber59252
Node: -s --verify-sig[=fail|no-fail]59413
Ref: #s---verify-sigfailno-fail59650
Node: --signature-extensions61000
Ref: #signature-extensions61206
Node: --gnupg-homedir61470
Ref: #gnupg-homedir61652
Node: --verify-save-failed61811
Ref: #verify-save-failed61988
Node: --xattr62116
Ref: #xattr62262
Node: --metalink62649
Ref: #metalink62795
Node: --fsync-policy63086
Ref: #fsync-policy63262
Node: --http2-request-window=number63317
Ref: #http2-request-windownumber63529
Node: --keep-extension63604
Ref: #keep-extension63767
Node: Directory Options64144
Ref: #directory-options64295
Node: -nd --no-directories64476
Ref: #nd---no-directories64653
Node: -x --force-directories64897
Ref: #x---force-directories65112
Node: -nH --no-host-directories65342
Ref: #nh---no-host-directories65565
Node: --protocol-directories65789
Ref: #protocol-directories65991
Node: --cut-dirs=number66211
Ref: #cut-dirsnumber66413
Node: -P prefix --directory-prefix=prefix67516
Ref: #p-prefix---directory-prefixprefix67733
Node: HTTP Options68016
Ref: #http-options68162
Node: --default-page=name69139
Ref: #default-pagename69300
Node: --default-http-port=port69424
Ref: #default-http-portport69629
Node: --default-https-port=port69718
Ref: #default-https-portport69927
Node: -E --adjust-extension70018
Ref: #e---adjust-extension70246
Node: --http-user=user --http-password=password71388
Ref: #http-useruser---http-passwordpassword71684
Node: --http-proxy-user=user --http-proxy-password=password72400
Ref: #http-proxy-useruser---http-proxy-passwordpassword72685
Node: --http-proxy=proxies72784
Ref: #http-proxyproxies73007
Node: --https-proxy=proxies73205
Ref: #https-proxyproxies73397
Node: --no-http-keep-alive73597
Ref: #no-http-keep-alive73777
Node: --no-cache74306
Ref: #no-cache74459
Node: --no-cookies74817
Ref: #no-cookies74973
Node: --load-cookies file75431
Ref: #load-cookies-file75610
Node: --save-cookies file77655
Ref: #save-cookies-file77844
Node: --keep-session-cookies78035
Ref: #keep-session-cookies78233
Node: --cookie-suffixes=file79067
Ref: #cookie-suffixesfile79261
Node: --ignore-length79700
Ref: #ignore-length79878
Node: --header=header-line80340
Ref: #headerheader-line80527
Node: --max-redirect=number81296
Ref: #max-redirectnumber81557
Node: --proxy-user=user --proxy-password=password [Not implemented use --http-proxy-password]81787
Ref: #proxy-useruser---proxy-passwordpassword-not-implemented-use---http-proxy-password82145
Node: --referer=url82393
Ref: #refererurl82624
Node: --save-headers82896
Ref: #save-headers83083
Node: -U agent-string --user-agent=agent-string83206
Ref: #u-agent-string---user-agentagent-string83479
Node: --post-data=string --post-file=file84447
Ref: #post-datastring---post-filefile84714
Node: --method=HTTP-Method87999
Ref: #methodhttp-method88230
Node: --body-data=Data-String --body-file=Data-File88479
Ref: #body-datadata-string---body-filedata-file88756
Node: --content-disposition90071
Ref: #content-disposition90288
Node: --content-on-error90749
Ref: #content-on-error90932
Node: --save-content-on91058
Ref: #save-content-on91238
Node: --trust-server-names91684
Ref: #trust-server-names91871
Node: --auth-no-challenge92050
Ref: #auth-no-challenge92236
Node: --compression=TYPE92596
Ref: #compressiontype92795
Node: --download-attr=[strippath|usepath]93321
Ref: #download-attrstrippathusepath93526
Node: HTTPS SSL/TLS Options94069
Ref: #https-ssltls-options94247
Node: --secure-protocol=protocol95192
Ref: #secure-protocolprotocol95371
Node: --https-only96460
Ref: #https-only96642
Node: --no-check-certificate96698
Ref: #no-check-certificate96892
Node: --certificate=file98462
Ref: #certificatefile98659
Node: --certificate-type=type98883
Ref: #certificate-typetype99086
Node: --private-key=file99203
Ref: #private-keyfile99401
Node: --private-key-type=type99519
Ref: #private-key-typetype99725
Node: --ca-certificate=file99811
Ref: #ca-certificatefile100019
Node: --ca-directory=directory100282
Ref: #ca-directorydirectory100488
Node: --crl-file=file101067
Ref: #crl-filefile101254
Node: --random-file=file101355
Ref: #random-filefile101539
Node: --egd-file=file102155
Ref: #egd-filefile102324
Node: --hsts103175
Ref: #hsts103324
Node: --hsts-file=file103601
Ref: #hsts-filefile103769
Node: --hsts-preload107481
Ref: #hsts-preload107663
Node: --hsts-preload-file=file107765
Ref: #hsts-preload-filefile107957
Node: --hpkp108234
Ref: #hpkp108392
Node: --hpkp-file=file108655
Ref: #hpkp-filefile108821
Node: --tls-resume109058
Ref: #tls-resume109233
Node: --tls-session-file=file109506
Ref: #tls-session-filefile109704
Node: --tls-false-start109967
Ref: #tls-false-start110157
Node: --check-hostname110328
Ref: #check-hostname110499
Node: --ocsp110543
Ref: #ocsp110688
Node: --ocsp-date110983
Ref: #ocsp-date111134
Node: --ocsp-nonce111185
Ref: #ocsp-nonce111345
Node: --ocsp-server111412
Ref: #ocsp-server111578
Node: --ocsp-stapling111648
Ref: #ocsp-stapling111822
Node: --ocsp-file=file111871
Ref: #ocsp-filefile112041
Node: --http2112179
Ref: #http2112328
Node: --http2-only112511
Ref: #http2-only112674
Node: --https-enforce=mode112770
Ref: #https-enforcemode112933
Node: mode=none113091
Ref: #modenone113213
Node: mode=soft113327
Ref: #modesoft113467
Node: mode=hard113553
Ref: #modehard113675
Node: Recursive Retrieval Options113763
Ref: #recursive-retrieval-options113968
Node: -r --recursive114192
Ref: #r---recursive114361
Node: -l depth --level=depth114425
Ref: #l-depth---leveldepth114633
Node: --delete-after114679
Ref: #delete-after114865
Node: -k --convert-links115300
Ref: #k---convert-links115501
Node: --convert-file-only117174
Ref: #convert-file-only117374
Node: -K --backup-converted118271
Ref: #k---backup-converted118478
Node: -m --mirror118588
Ref: #m---mirror118776
Node: -p --page-requisites118950
Ref: #p---page-requisites119152
Node: --strict-comments121684
Ref: #strict-comments121867
Node: --robots122012
Ref: #robots122150
Node: Recursive Accept/Reject Options122579
Ref: #recursive-acceptreject-options122785
Node: -A acclist --accept=acclist -R rejlist --reject=rejlist123277
Ref: #a-acclist---acceptacclist--r-rejlist---rejectrejlist123584
Node: --accept-regex=urlregex --reject-regex=urlregex123980
Ref: #accept-regexurlregex---reject-regexurlregex124289
Node: --regex-type=regextype124352
Ref: #regex-typeregextype124586
Node: --filter-urls124745
Ref: #filter-urls124950
Node: -D domain-list --domains=domain-list125026
Ref: #d-domain-list---domainsdomain-list125294
Node: --exclude-domains=domain-list125409
Ref: #exclude-domainsdomain-list125658
Node: --follow-tags=list125708
Ref: #follow-tagslist125917
Node: --ignore-tags=list126212
Ref: #ignore-tagslist126405
Node: --ignore-case127123
Ref: #ignore-case127303
Node: -H --span-hosts127601
Ref: #h---span-hosts127814
Node: -L --relative [Not implemented yet]127877
Ref: #l---relative-not-implemented-yet128151
Node: -I list --include-directories=list128286
Ref: #i-list---include-directorieslist128577
Node: -X list --exclude-directories=list129044
Ref: #x-list---exclude-directorieslist129315
Node: -I / -X combinations129537
Ref: #i--x-combinations129704
Node: -np --no-parent130351
Ref: #np---no-parent130573
Node: --filter-mime-type=list130757
Ref: #filter-mime-typelist130942
Node: Plugin Options131793
Ref: #plugin-options131931
Node: --list-plugins132074
Ref: #list-plugins132219
Node: --local-plugin=file132265
Ref: #local-pluginfile132442
Node: --plugin=name132470
Ref: #pluginname132646
Node: --plugin-dirs=directories132725
Ref: #plugin-dirsdirectories132919
Node: --plugin-help133005
Ref: #plugin-help133181
Node: --plugin-opt=option133231
Ref: #plugin-optoption133385
Node: Environment133498
Ref: #environment133613
Node: Exit Status134242
Ref: #exit-status134362
Node: Startup File135010
Ref: #startup-file135125
Node: Wget2rc Location135899
Ref: #wget2rc-location136006
Node: Bugs137663
Ref: #bugs137759
Node: See also140069
Ref: #see-also140169
Node: Author140423
Ref: #author140524
Node: Copyright140696
Ref: #copyright140786

End Tag Table


Local Variables:
coding: utf-8
End:
